sp = mult_addr + 0x4
call ram[0x8014d10:4]
NG = tmpNG
call ram[0x80417c0:4]
CALLOTHER 0x111, r6
r5 = ram[0x803f7a4:4]
call ram[0x8041a70:4]
call ram[0x8040dd0:4]
r2 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11420:4]
r8 = r5
OV = tmpOV
*[ram]unique[0x11420:4] = register[0x2c:4]
call ram[0x8040dd0:4]
r3 = *[ram]unique[0x11420:4]
r4 = *[ram]unique[0x11340:4]
OV = tmpOV
OV = tmpOV
*[ram]unique[0x11420:4] = register[0x2c:4]
if (unique[0xf6a0:1]) goto ram[0x803f78a:4]
r3 = *[ram]unique[0x11420:4]
OV = tmpOV
*[ram]unique[0x11420:4] = register[0x3c:4]
if (unique[0x11bd0:1]) goto ram[0x803f78a:4]
r3 = *[ram]unique[0x11420:4]
r9 = *[ram]unique[0x112a0:4]
*[ram]unique[0x11420:4] = register[0x3c:4]
*[ram]unique[0x112a0:4] = register[0x40:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
call ram[0x8041a40:4]
CALLOTHER 0x111, r7
r0 = *[ram]unique[0x11420:4]
call [pc]
CALLOTHER 0x111, r6
call ram[0x8041a70:4]
r4 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11420:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x803f760:4]
call ram[0x8041a40:4]
NG = tmpNG
CALLOTHER 0x111, r3
call ram[0x8041790:4]
call ram[0x8014d00:4]
sp = mult_addr
goto ram[0x80409e0:4]
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
r4 = ram[0x803f7c8:4]
r1 = ram[0x803f7cc:4]
tmpZR = r0 == 0x0
sp = mult_addr
r2 = r4
call ram[0x8015240:4]
r0 = r4
call ram[0x8040b00:4]

r4 = zext(unique[0x11ed0:1])
NG = tmpNG
r0 = zext(unique[0x11ed0:1])
NG = tmpNG
tmpZR = r3 == 0x0
sp = mult_addr
r4 = *[ram]unique[0x11420:4]
r2 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11420:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
if (unique[0x11bd0:1]) goto ram[0x803f81e:4]
r2 = *[ram]unique[0x11420:4]
tmpZR = r3 == 0x0
tmpZR = r0 == 0x0
*[ram]unique[0x112a0:4] = register[0x20:4]
r3 = *[ram]unique[0x11420:4]
tmpZR = r3 == 0x0
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x803f84e:4]
r0 = sext(unique[0x18230:2])
tmpZR = r0 == 0x0
NG = tmpNG
r4 = *[ram]unique[0x112a0:4]
tmpZR = r4 == 0x0
*[ram]unique[0x112a0:4] = register[0x30:4]
r0 = *[ram]unique[0x112a0:4]
tmpZR = r1 == 0x0
NG = tmpNG
sp = mult_addr
*[ram]unique[0x112a0:4] = register[0x24:4]
return pc
if (unique[0x11bd0:1]) goto ram[0x803f828:4]
OV = tmpOV
unique[0xfbd0:1] = CY && unique[0xfbb0:1]
tmpZR = r3 == 0x0
*[ram]unique[0x11420:4] = register[0x2c:4]
r5 = zext(unique[0x11ef0:2])
r2 = *[ram]unique[0x11420:4]
OV = tmpOV
r0 = r0 + r3
r0 = SUBPIECE unique[0x19db0:8], 0x0
tmpZR = r5 == 0x0
tmpZR = r3 == 0x0
tmpZR = r3 == 0x0
*[ram]unique[0x112a0:4] = register[0x2c:4]
r3 = *[ram]unique[0x11420:4]
tmpZR = r3 == 0x0
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x803f7f8:4]
r3 = *[ram]unique[0x112a0:4]
CY = shift_carry
tmpZR = r3 == 0x0
r0 = sext(unique[0x18230:2])
r4 = *[ram]unique[0x112a0:4]
unique[0xfae0:1] = ZR != 0x0
tmpZR = r4 == 0x0
tmpZR = r4 == 0x0
*[ram]unique[0x112a0:4] = register[0x30:4]
goto ram[0x803f7fa:4]
tmpZR = r3 == 0x0
sp = mult_addr
r5 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11420:4]
r4 = *[ram]unique[0x11420:4]
*[ram]unique[0x11420:4] = register[0x30:4]
if (unique[0x11bd0:1]) goto ram[0x803f888:4]
OV = tmpOV
unique[0xfbd0:1] = CY && unique[0xfbb0:1]
tmpZR = r4 == 0x0
*[ram]unique[0x11420:4] = register[0x30:4]
r3 = zext(unique[0x11ef0:2])
