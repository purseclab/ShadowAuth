sp = mult_addr
mult_addr = mult_addr + 0x8
r4 = ram[0x80210f0:4]
r5 = ram[0x80210f4:4]
r0 = *[ram]unique[0x11420:4]
r6 = ram[0x80210f8:4]
sp = sp - unique[0xfdd0:4]
r7 = s1
s16 = s0
call ram[0x80017ac:4]
r2 = r0
r3 = r1
r0 = *[ram]unique[0x112a0:4]
*[ram]unique[0x17820:4] = register[0x2c:4]
call ram[0x80017ac:4]
r3 = *[ram]unique[0x12270:4]
*[ram]unique[0x17820:4] = register[0x24:4]
r1 = ram[0x80210fc:4]
r0 = ram[0x8021100:4]
call ram[0x8016520:4]
r0 = *[ram]unique[0x112a0:4]
call ram[0x8032820:4]
r3 = ram[0x8021104:4]
r1 = ram[0x8021108:4]
lr = sext(unique[0x12420:1])
r3 = ram[0x802110c:4]
r2 = r0
r0 = ram[0x8021110:4]
OV = tmpOV
unique[0xfae0:1] = ZR != 0x0
r3 = r0
r0 = ram[0x8021114:4]
call ram[0x8016520:4]
s1 = *[ram]unique[0x41f0:4]
s0 = s16
call ram[0x8032d10:4]
r0 = s0
call ram[0x80017ac:4]
r2 = r0
r3 = r1
r0 = *[ram]unique[0x112a0:4]
*[ram]unique[0x17820:4] = register[0x2c:4]
call ram[0x80017ac:4]
r3 = *[ram]unique[0x12270:4]
*[ram]unique[0x17820:4] = register[0x24:4]
r1 = ram[0x8021118:4]
r0 = ram[0x8021114:4]
call ram[0x8016520:4]
r3 = *[ram]unique[0x11420:4]
tmpZR = r3 == 0x0
tmpZR = r5 == 0x0
r0 = *[ram]unique[0x11420:4]
call ram[0x80017ac:4]
r2 = r0
r3 = r1
r0 = ram[0x8021114:4]
r1 = ram[0x802111c:4]
call ram[0x8016520:4]
r0 = *[ram]unique[0x11420:4]
call ram[0x80017ac:4]
r2 = r0
r3 = r1
r0 = ram[0x8021100:4]
r1 = ram[0x8021120:4]
call ram[0x8016520:4]
r0 = *[ram]unique[0x11420:4]
call ram[0x80017ac:4]
r2 = r0
r3 = r1
r0 = ram[0x8021114:4]
r1 = ram[0x8021124:4]
call ram[0x8016520:4]
r4 = *[ram]unique[0x11420:4]
tmpZR = r0 == 0x0
call ram[0x8015170:4]
if (unique[0x11bf0:1]) goto ram[0x8021058:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
tmpZR = r2 == 0x0
r0 = s16
r6 = *[ram]unique[0x11420:4]
r5 = *[ram]unique[0x11420:4]
r4 = r2
call ram[0x80017ac:4]
r2 = r0
r3 = r1
r0 = r7
*[ram]unique[0x17820:4] = register[0x2c:4]
call ram[0x80017ac:4]
OV = tmpOV
r3 = *[ram]unique[0x12270:4]
r4 = *[ram]unique[0x11420:4]
*[ram]unique[0x17820:4] = register[0x24:4]
r1 = ram[0x8021128:4]
r0 = ram[0x8021114:4]
call ram[0x8016520:4]
NG = tmpNG
NG = tmpNG
r1 = ram[0x802112c:4]
r0 = ram[0x8021114:4]
call ram[0x8016520:4]
r0 = r6
call ram[0x80017ac:4]
r2 = r0
r3 = r1
r0 = r4
*[ram]unique[0x17820:4] = register[0x2c:4]
call ram[0x80017ac:4]
r6 = r0
r7 = r1
r0 = r5
*[ram]unique[0x17820:4] = register[0x3c:4]
call ram[0x80017ac:4]
r3 = *[ram]unique[0x12270:4]
*[ram]unique[0x17820:4] = register[0x24:4]
r1 = ram[0x8021130:4]
r0 = ram[0x8021114:4]
call ram[0x8016520:4]
s0 = *[ram]unique[0x42b0:4]
call ram[0x80343d0:4]
r0 = s0
call ram[0x80017ac:4]
r2 = r0
r3 = r1
r0 = ram[0x8021114:4]
r1 = ram[0x8021138:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
sp = mult_addr
goto ram[0x8016520:4]
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
NG = tmpNG
NG = tmpNG
q0 = CALLOTHER 0xd6, d8, d4, unique[0x2350:4], unique[0x2260:1]
r4 = mult_addr
NG = tmpNG
*[ram]unique[0x11480:4] = unique[0x176b0:1]
NG = tmpNG
q8 = CALLOTHER 0xd6, d0, d4, unique[0x2340:4], unique[0x2260:1]
if (unique[0x11bd0:1]) goto ram[0x8021176:4]
NG = tmpNG
if (unique[0x11bd0:1]) goto ram[0x8021178:4]
NG = tmpNG
if (unique[0xf7b0:1]) goto ram[0x80210b8:4]
NG = tmpNG
q8 = CALLOTHER 0xd6, d0, d4, unique[0x2350:4], unique[0x2260:1]
tmpZR = r8 == 0x0
NG = tmpNG
NG = tmpNG
tmpZR = r8 == 0x0
tmpZR = r8 == 0x0
OV = tmpOV
NG = tmpNG
NG = tmpNG
