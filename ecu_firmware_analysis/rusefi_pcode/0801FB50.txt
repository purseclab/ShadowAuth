sp = mult_addr
r4 = ram[0x801fb8c:4]
r0 = ram[0x801fb90:4]
r3 = *[ram]unique[0x11420:4]
r1 = *[ram]unique[0x12270:4]
r6 = *[ram]unique[0x12270:4]
sp = sp - unique[0xfdd0:4]
*[ram]unique[0x17820:4] = register[0x24:4]
*[ram]unique[0x114b0:4] = register[0x2c:4]
*[ram]unique[0x17820:4] = register[0x38:4]
r3 = *[ram]unique[0x11420:4]
r1 = ram[0x801fb94:4]
tmpZR = r2 == 0x0
call ram[0x8016520:4]
r3 = *[ram]unique[0x11420:4]
*[ram]unique[0x114b0:4] = register[0x2c:4]
r0 = ram[0x801fb90:4]
r3 = *[ram]unique[0x11420:4]
r2 = *[ram]unique[0x11420:4]
r1 = ram[0x801fb98:4]
call ram[0x8016520:4]
sp = sp + unique[0xfdd0:4]
return pc
*[ram]unique[0x11420:4] = register[0x20:4]
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x20:4]
NG = tmpNG
*[ram]unique[0x17920:4] = register[0x20:4]
mult_addr = mult_addr + 0x4
NG = tmpNG
NG = tmpNG
r2 = r0
sp = mult_addr
r1 = ram[0x801fbbc:4]
r0 = ram[0x801fbc0:4]
call ram[0x8016520:4]
call ram[0x801fb50:4]
r2 = ram[0x801fbc4:4]
r3 = *[ram]unique[0x11420:4]
OV = tmpOV
*[ram]unique[0x11420:4] = register[0x2c:4]
return pc

