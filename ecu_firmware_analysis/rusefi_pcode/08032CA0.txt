sp = mult_addr
r2 = r0
r0 = *[ram]unique[0x11420:4]
sp = sp - unique[0xfdd0:4]
if (unique[0x11bf0:1]) goto ram[0x8032ce2:4]
r4 = s1
r3 = ram[0x8032cf4:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032cce:4]
OV = tmpOV
*[ram]unique[0x114b0:4] = register[0x24:4]
NG = tmpNG
s1 = s0
r2 = *[ram]unique[0x11420:4]
s0 = r4
r1 = r3
call ram[0x8032960:4]
sp = sp + unique[0xfdd0:4]
return pc
r2 = *[ram]unique[0x11420:4]
r1 = ram[0x8032cf8:4]
tmpZR = r0 == 0x0
call ram[0x8015f20:4]
s0 = *[ram]unique[0x42b0:4]
sp = sp + unique[0xfdd0:4]
return pc
r1 = ram[0x8032d00:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
s0 = *[ram]unique[0x42b0:4]
goto ram[0x8032cca:4]

NG = tmpNG
r0 = zext(unique[0x11eb0:1])
r2 = mult_addr
NG = tmpNG
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
mult_addr = mult_addr + 0x4
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r4 = s0
r6 = ram[0x8032e08:4]
OV = tmpOV
sp = sp - unique[0xfdd0:4]
if (unique[0xf6a0:1]) goto ram[0x8032dd8:4]
r5 = s1
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032dd8:4]
r2 = ram[0x8032e0c:4]
r0 = *[ram]unique[0x11420:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032de0:4]
OV = tmpOV
NG = tmpNG
*[ram]unique[0x114b0:4] = register[0x24:4]
s1 = s0
r1 = r3
r2 = *[ram]unique[0x11420:4]
s0 = r5
call ram[0x8032960:4]
r3 = s0
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032dea:4]
r2 = ram[0x8032e10:4]
s15 = r3
s0 = *[ram]unique[0x4230:4]
s0 = s15 f+ s0
r3 = s0
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032dfa:4]
s15 = *[ram]unique[0x42b0:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xf860:1]) goto ram[0x8032d7e:4]
s15 = *[ram]unique[0x42b0:4]
