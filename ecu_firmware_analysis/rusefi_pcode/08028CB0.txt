sp = mult_addr
r4 = ram[0x8028de4:4]
r7 = ram[0x8028de8:4]
r5 = zext(unique[0x12120:1])
r6 = ram[0x8028dec:4]
r7 = mult_addr
tmpZR = r5 == 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]
tmpZR = r5 == 0x0
OV = tmpOV
r5 = mult_addr
r7 = mult_addr
r5 = mult_addr
r7 = mult_addr
r5 = mult_addr
mult_addr = mult_addr + 0x4
mult_addr = mult_addr + 0x4
r6 = mult_addr
tmpZR = r5 == 0x0
OV = tmpOV
r5 = mult_addr
r6 = mult_addr
r5 = mult_addr
r6 = mult_addr
r5 = mult_addr
mult_addr = mult_addr + 0x4
mult_addr = mult_addr + 0x4
tmpZR = r0 == 0x0
r1 = ram[0x8028df0:4]
r7 = ram[0x8028df4:4]
r6 = ram[0x8028df8:4]
r5 = ram[0x8028dfc:4]
tmpZR = r2 == 0x0
OV = tmpOV
call ram[0x8005448:4]
r3 = ram[0x8028e00:4]
r1 = ram[0x8028e04:4]
*[ram]unique[0x11420:4] = register[0x24:4]
mult_addr = mult_addr + 0x4
NG = tmpNG
*[ram]unique[0x112a0:4] = register[0x2c:4]
NG = tmpNG
*[ram]unique[0x112a0:4] = unique[0x17850:2]
NG = tmpNG
*[ram]unique[0x112a0:4] = unique[0x17850:2]
NG = tmpNG
r2 = ram[0x8028e08:4]
*[ram]unique[0x112a0:4] = register[0x2c:4]
NG = tmpNG
*[ram]unique[0x112a0:4] = register[0x2c:4]
*[ram]unique[0x112a0:4] = register[0x28:4]
tmpZR = r3 == 0x0
tmpZR = r2 == 0x0
*[ram]unique[0x11420:4] = register[0x2c:4]
*[ram]unique[0x112a0:4] = unique[0x17850:2]
tmpZR = r3 == 0x0
r1 = ram[0x8028e0c:4]
*[ram]unique[0x11420:4] = register[0x24:4]
r1 = ram[0x8028e10:4]
*[ram]unique[0x11420:4] = register[0x24:4]
tmpZR = r2 == 0x0
r1 = ram[0x8028e14:4]
*[ram]unique[0x11420:4] = register[0x24:4]
tmpZR = r3 == 0x0
r1 = ram[0x8028e18:4]
*[ram]unique[0x11420:4] = register[0x24:4]
tmpZR = r2 == 0x0
r1 = ram[0x8028e1c:4]
*[ram]unique[0x11420:4] = register[0x24:4]
tmpZR = r3 == 0x0
r1 = ram[0x8028e20:4]
*[ram]unique[0x11420:4] = register[0x24:4]
tmpZR = r2 == 0x0
r1 = ram[0x8028e24:4]
*[ram]unique[0x11420:4] = register[0x24:4]
tmpZR = r3 == 0x0
r2 = ram[0x8028e28:4]
*[ram]unique[0x11420:4] = register[0x28:4]
tmpZR = r1 == 0x0
tmpZR = r2 == 0x0
r3 = ram[0x8028e2c:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
*[ram]unique[0x11420:4] = register[0x3c:4]
tmpZR = r1 == 0x0
tmpZR = r2 == 0x0
*[ram]unique[0x11420:4] = register[0x2c:4]
*[ram]unique[0x112a0:4] = register[0x2c:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
tmpZR = r3 == 0x0
*[ram]unique[0x11420:4] = register[0x38:4]
*[ram]unique[0x112a0:4] = register[0x20:4]
lr = ram[0x8028e40:4]
r6 = ram[0x8028e30:4]
*[ram]unique[0x11420:4] = register[0x34:4]
tmpZR = r7 == 0x0
tmpZR = r0 == 0x0
*[ram]unique[0x112a0:4] = register[0x58:4]
*[ram]unique[0x11420:4] = register[0x38:4]
r12 = ram[0x8028e44:4]
r5 = ram[0x8028e34:4]
r1 = ram[0x8028e38:4]
r2 = ram[0x8028e3c:4]
*[ram]unique[0x112a0:4] = register[0x50:4]
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x34:4]
*[ram]unique[0x112a0:4] = register[0x24:4]
*[ram]unique[0x11420:4] = register[0x28:4]
*[ram]unique[0x112a0:4] = register[0x2c:4]
return pc
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
OV = tmpOV
NG = tmpNG
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = unique[0x184e0:4] s< 0x0
NG = tmpNG
OV = tmpOV
NG = tmpNG
OV = tmpOV
r4 = sext(unique[0x11f50:2])
NG = tmpNG
NG = tmpNG
NG = tmpNG
r4 = mult_addr
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
r1 = mult_addr
NG = tmpNG
OV = tmpOV
NG = tmpNG
r1 = mult_addr
NG = tmpNG
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
mult_addr = mult_addr + 0x4
OV = tmpOV
