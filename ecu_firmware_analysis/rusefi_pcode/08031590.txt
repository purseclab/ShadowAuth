sp = mult_addr
NG = tmpNG
r4 = r0
NG = tmpNG
call ram[0x8030240:4]
r3 = ram[0x8031694:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
s1 = 0x3fc00000
r0 = r4
*[ram]unique[0x112a0:4] = unique[0x17760:1]
s0 = 0x3f400000
call ram[0x8030230:4]
r3 = *[ram]unique[0x11420:4]
r1 = ram[0x8031698:4]
r2 = ram[0x803169c:4]
*[ram]unique[0x11420:4] = register[0x24:4]
OV = tmpOV
unique[0xfc40:1] = NG == OV
tmpZR = r3 == 0x0
*[ram]unique[0x11420:4] = register[0x2c:4]
*[ram]unique[0x11420:4] = register[0x28:4]
r0 = r4
r2 = r5
s0 = *[ram]unique[0x42b0:4]
*[ram]unique[0x11460:4] = unique[0x17690:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = 0x3e800000
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
NG = tmpNG
s0 = 0x3f000000
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
NG = tmpNG
s0 = 0x3f400000
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
sp = mult_addr
s0 = 0x3f800000
goto ram[0x8030a20:4]

NG = tmpNG
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x38:4]
OV = tmpOV
NG = tmpNG
OV = tmpOV
r4 = mult_addr
OV = tmpOV
r1 = *[ram]unique[0x114b0:4]
OV = tmpOV
OV = tmpOV
OV = tmpOV
r4 = mult_addr
OV = tmpOV
*[ram]unique[0x11420:4] = register[0x38:4]
OV = tmpOV
OV = tmpOV
OV = tmpOV
r4 = mult_addr
OV = tmpOV
r1 = *[ram]unique[0x114b0:4]
OV = tmpOV
*[ram]unique[0x11420:4] = register[0x38:4]
OV = tmpOV
OV = tmpOV
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
sp = sp - unique[0xfdd0:4]
NG = tmpNG
r0 = sp
call ram[0x8022220:4]
r3 = zext(unique[0x12120:1])
if (unique[0x11bf0:1]) goto ram[0x803171a:4]
s0 = *[ram]unique[0x4230:4]
r2 = ram[0x8031720:4]
r0 = ram[0x8031724:4]
tmpZR = r1 == 0x0
NG = tmpNG
call ram[0x801ae10:4]
r3 = ram[0x8031728:4]
r3 = *[ram]unique[0x11420:4]
CALLOTHER 0x1, 0xa, 0xb, 0x6, cr0, cr13, cr0
tmpZR = r3 == 0x0
s15 = *[ram]unique[0x4230:4]
s0 = CALLOTHER 0xc4, s0, unique[0x31a0:1]
s0 = s0 f+ s15
CALLOTHER 0x1, 0xa, 0xf, 0x6, cr7, cr13, cr0
r0 = s15
sp = sp + unique[0xfdd0:4]
return pc
s0 = *[ram]unique[0x42b0:4]
goto ram[0x80316e6:4]
*[ram]unique[0x11440:4] = unique[0x176d0:2]
NG = tmpNG
goto [pc]
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
if (unique[0x11bf0:1]) goto ram[0x80317a2:4]
sp = mult_addr
tmpZR = r2 == 0x0
r4 = r0
NG = tmpNG
call ram[0x800557c:4]
NG = tmpNG
NG = tmpNG
tmpZR = r1 == 0x0
*[ram]unique[0x112a0:4] = register[0x2c:4]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17850:2]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17850:2]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17850:2]
return pc
r1 = ram[0x80317ac:4]
tmpZR = r0 == 0x0
goto ram[0x8015240:4]
goto [pc]
NG = tmpNG
r2 = ram[0x80317cc:4]
tmpZR = r1 == 0x0
tmpZR = r3 == 0x0
r3 = r3 + unique[0x4020:4]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x80317ba:4]
tmpZR = r2 == 0x0
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x80317b6:4]
return pc
return pc
NG = tmpNG
tmpZR = r2 == 0x0
tmpZR = r1 == 0x0
tmpZR = r3 == 0x0
r3 = r3 + unique[0x4020:4]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x80317dc:4]
tmpZR = r2 == 0x0
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x80317d8:4]
return pc

r3 = ram[0x8031838:4]
r1 = ram[0x803183c:4]
r2 = ram[0x8031840:4]
s2 = *[ram]unique[0x42b0:4]
sp = mult_addr
NG = tmpNG
r4 = ram[0x8031848:4]
*[ram]unique[0x112a0:4] = register[0x20:4]
*[ram]unique[0x112a0:4] = register[0x30:4]
r0 = ram[0x803184c:4]
r4 = ram[0x8031850:4]
*[ram]unique[0x112a0:4] = register[0x24:4]
*[ram]unique[0x112a0:4] = register[0x28:4]
r1 = ram[0x8031854:4]
r2 = ram[0x8031858:4]
*[ram]unique[0x112a0:4] = register[0x20:4]
*[ram]unique[0x112a0:4] = register[0x30:4]
s1 = s0
sp = sp + 0x4
*[ram]unique[0x112a0:4] = register[0x24:4]
tmpZR = r0 == 0x0
*[ram]unique[0x112a0:4] = register[0x28:4]
goto ram[0x802e1d0:4]
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
NG = tmpNG
r10 = r10 + unique[0xfd40:4]
*[ram]unique[0x11440:4] = unique[0x176d0:2]
OV = tmpOV
if (unique[0xf780:1]) goto ram[0x803185c:4]
OV = tmpOV
NG = tmpNG
r2 = r2 + unique[0xfd40:4]
NG = tmpNG
OV = tmpOV
NG = tmpNG
OV = tmpOV
*[ram]unique[0x11440:4] = unique[0x176d0:2]
OV = tmpOV
