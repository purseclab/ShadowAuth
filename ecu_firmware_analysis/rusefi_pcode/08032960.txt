sp = mult_addr + 0x4
mult_addr = mult_addr + 0x8
r8 = s0
r4 = ram[0x8032b9c:4]
sp = sp - unique[0xfdd0:4]
OV = tmpOV
r11 = *[ram]unique[0x112a0:4]
if (unique[0xf8b0:1]) goto ram[0x8032b1e:4]
r6 = s1
OV = tmpOV
if (unique[0xf8b0:1]) goto ram[0x8032aca:4]
r7 = r2
r10 = r0
r2 = r1
r9 = r1
r1 = r0
r0 = ram[0x8032ba0:4]
r5 = r3
call ram[0x8032870:4]
s0 = r6
r3 = r0
r2 = r5
r0 = ram[0x8032ba4:4]
*[ram]unique[0x114b0:4] = register[0x2c:4]
r1 = r7
call ram[0x8032870:4]
r3 = *[ram]unique[0x114b0:4]
OV = tmpOV
r4 = r0
if (unique[0xf820:1]) goto ram[0x8032a66:4]
OV = tmpOV
if (unique[0xfa30:1]) goto ram[0x8032aee:4]
tmpZR = r2 == 0x0
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032aba:4]
OV = tmpOV
OV = tmpOV
if (unique[0xf8b0:1]) goto ram[0x8032b4c:4]
NG = tmpNG
OV = tmpOV
r2 = *[ram]unique[0x120f0:4]
r1 = *[ram]unique[0x120b0:4]
*[ram]unique[0x114b0:4] = register[0x2c:4]
tmpZR = r0 == 0x0
tmpZR = r10 == 0x0
s17 = *[ram]unique[0x41f0:4]
s2 = *[ram]unique[0x41f0:4]
r0 = ram[0x8032ba8:4]
*[ram]unique[0x41f0:4] = register[0x308:4]
tmpZR = r1 == 0x0
tmpZR = r2 == 0x0
s3 = *[ram]unique[0x41f0:4]
s1 = *[ram]unique[0x41f0:4]
s4 = r8
s0 = s17
call ram[0x8019a30:4]
r3 = *[ram]unique[0x114b0:4]
r1 = *[ram]unique[0x120b0:4]
r2 = *[ram]unique[0x120f0:4]
s2 = *[ram]unique[0x41f0:4]
r0 = ram[0x8032bac:4]
NG = tmpNG
OV = tmpOV
r1 = r1 + r3
r2 = r2 + r3
s3 = *[ram]unique[0x41f0:4]
s1 = *[ram]unique[0x41f0:4]
r3 = r3 + r7
s4 = r8
s16 = s0
r7 = r7 + r4
s0 = s17
s19 = *[ram]unique[0x41f0:4]
s18 = *[ram]unique[0x41f0:4]
call ram[0x8019a30:4]
s4 = r6
r0 = ram[0x8032bac:4]
s3 = s0
s2 = s19
s1 = s16
s0 = s18
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
sp = mult_addr
goto ram[0x8019a30:4]
OV = tmpOV
if (unique[0xf820:1]) goto ram[0x8032b42:4]
OV = tmpOV
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032aa4:4]
NG = tmpNG
r3 = *[ram]unique[0x112a0:4]
r0 = ram[0x8032bac:4]
OV = tmpOV
OV = tmpOV
r3 = r3 + r4
r2 = r2 + r7
r4 = r4 + r7
s3 = *[ram]unique[0x41f0:4]
s2 = *[ram]unique[0x41f0:4]
s1 = *[ram]unique[0x41f0:4]
s0 = *[ram]unique[0x41f0:4]
s4 = r6
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
sp = mult_addr
goto ram[0x8019a30:4]
r3 = *[ram]unique[0x112a0:4]
tmpZR = r5 == 0x0
s0 = *[ram]unique[0x41f0:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
OV = tmpOV
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032b86:4]
NG = tmpNG
r3 = *[ram]unique[0x120f0:4]
r0 = ram[0x8032bb0:4]
goto ram[0x8032a78:4]
r0 = s1
call ram[0x80017ac:4]
r2 = r0
r3 = r1
tmpZR = r0 == 0x0
r1 = ram[0x8032bb4:4]
call ram[0x8015f20:4]
s0 = *[ram]unique[0x42b0:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
tmpZR = r9 == 0x0
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032b7c:4]
NG = tmpNG
OV = tmpOV
r0 = *[ram]unique[0x120f0:4]
r3 = *[ram]unique[0x120b0:4]
s1 = *[ram]unique[0x41f0:4]
s3 = *[ram]unique[0x41f0:4]
r0 = ram[0x8032bb0:4]
r1 = r1 + r10
r10 = r10 + r2
s2 = *[ram]unique[0x41f0:4]
s0 = *[ram]unique[0x41f0:4]
s4 = r8
goto ram[0x8032a96:4]
r0 = s0
call ram[0x80017ac:4]
r2 = r0
r3 = r1
tmpZR = r0 == 0x0
r1 = ram[0x8032bbc:4]
call ram[0x8015f20:4]
s0 = *[ram]unique[0x42b0:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
r3 = *[ram]unique[0x112a0:4]
s0 = *[ram]unique[0x41f0:4]
goto ram[0x8032ab0:4]
NG = tmpNG
OV = tmpOV
r3 = *[ram]unique[0x120f0:4]
r4 = *[ram]unique[0x120b0:4]
r0 = ram[0x8032bb0:4]
tmpZR = r3 == 0x0
r1 = r1 + r10
tmpZR = r5 == 0x0
r10 = r10 + r2
s3 = *[ram]unique[0x41f0:4]
s2 = *[ram]unique[0x41f0:4]
s1 = *[ram]unique[0x41f0:4]
s0 = *[ram]unique[0x41f0:4]
s4 = r8
goto ram[0x8032a96:4]
r3 = *[ram]unique[0x120f0:4]
s0 = *[ram]unique[0x41f0:4]
goto ram[0x8032ab0:4]
tmpZR = r3 == 0x0
r9 = r9 + r3
r3 = r3 + r5
r2 = *[ram]unique[0x120f0:4]
tmpZR = r3 == 0x0
s0 = *[ram]unique[0x41f0:4]
goto ram[0x8032ab0:4]
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
NG = tmpNG
r0 = zext(unique[0x11f10:2])
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x20:4]
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x30:4]
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x20:4]
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x30:4]
NG = tmpNG
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
*[ram]unique[0x11420:4] = register[0x30:4]
NG = tmpNG
sp = mult_addr
r2 = r0
r0 = *[ram]unique[0x11420:4]
sp = sp - unique[0xfdd0:4]
if (unique[0x11bf0:1]) goto ram[0x8032c02:4]
r4 = s1
r3 = ram[0x8032c14:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032bee:4]
OV = tmpOV
*[ram]unique[0x114b0:4] = register[0x24:4]
NG = tmpNG
s1 = s0
r2 = *[ram]unique[0x11420:4]
s0 = r4
r1 = r3
call ram[0x8032960:4]
sp = sp + unique[0xfdd0:4]
return pc
r2 = *[ram]unique[0x11420:4]
r1 = ram[0x8032c18:4]
tmpZR = r0 == 0x0
call ram[0x8015f20:4]
s0 = *[ram]unique[0x42b0:4]
sp = sp + unique[0xfdd0:4]
return pc
r1 = ram[0x8032c20:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
s0 = *[ram]unique[0x42b0:4]
goto ram[0x8032bea:4]

NG = tmpNG
r0 = zext(unique[0x11eb0:1])
r2 = mult_addr
NG = tmpNG
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
mult_addr = mult_addr + 0x4
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r2 = r0
r0 = *[ram]unique[0x11420:4]
sp = sp - unique[0xfdd0:4]
if (unique[0x11bf0:1]) goto ram[0x8032c72:4]
r4 = s1
r3 = ram[0x8032c84:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032c5e:4]
OV = tmpOV
*[ram]unique[0x114b0:4] = register[0x24:4]
NG = tmpNG
s1 = s0
r2 = *[ram]unique[0x11420:4]
s0 = r4
r1 = r3
call ram[0x8032960:4]
sp = sp + unique[0xfdd0:4]
return pc
r2 = *[ram]unique[0x11420:4]
r1 = ram[0x8032c88:4]
tmpZR = r0 == 0x0
call ram[0x8015f20:4]
s0 = *[ram]unique[0x42b0:4]
sp = sp + unique[0xfdd0:4]
return pc
r1 = ram[0x8032c90:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
s0 = *[ram]unique[0x42b0:4]
goto ram[0x8032c5a:4]

NG = tmpNG
r0 = zext(unique[0x11eb0:1])
r2 = mult_addr
NG = tmpNG
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
mult_addr = mult_addr + 0x4
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r2 = r0
r0 = *[ram]unique[0x11420:4]
sp = sp - unique[0xfdd0:4]
if (unique[0x11bf0:1]) goto ram[0x8032ce2:4]
r4 = s1
r3 = ram[0x8032cf4:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032cce:4]
OV = tmpOV
*[ram]unique[0x114b0:4] = register[0x24:4]
NG = tmpNG
s1 = s0
r2 = *[ram]unique[0x11420:4]
s0 = r4
r1 = r3
call ram[0x8032960:4]
sp = sp + unique[0xfdd0:4]
return pc
r2 = *[ram]unique[0x11420:4]
r1 = ram[0x8032cf8:4]
tmpZR = r0 == 0x0
call ram[0x8015f20:4]
s0 = *[ram]unique[0x42b0:4]
sp = sp + unique[0xfdd0:4]
return pc
r1 = ram[0x8032d00:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
s0 = *[ram]unique[0x42b0:4]
goto ram[0x8032cca:4]

NG = tmpNG
r0 = zext(unique[0x11eb0:1])
r2 = mult_addr
NG = tmpNG
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
mult_addr = mult_addr + 0x4
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r4 = s0
r6 = ram[0x8032e08:4]
OV = tmpOV
sp = sp - unique[0xfdd0:4]
if (unique[0xf6a0:1]) goto ram[0x8032dd8:4]
r5 = s1
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032dd8:4]
r2 = ram[0x8032e0c:4]
r0 = *[ram]unique[0x11420:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032de0:4]
OV = tmpOV
NG = tmpNG
*[ram]unique[0x114b0:4] = register[0x24:4]
s1 = s0
r1 = r3
r2 = *[ram]unique[0x11420:4]
s0 = r5
call ram[0x8032960:4]
r3 = s0
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032dea:4]
r2 = ram[0x8032e10:4]
s15 = r3
s0 = *[ram]unique[0x4230:4]
s0 = s15 f+ s0
r3 = s0
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8032dfa:4]
s15 = *[ram]unique[0x42b0:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xf860:1]) goto ram[0x8032d7e:4]
s15 = *[ram]unique[0x42b0:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xf740:1]) goto ram[0x8032db8:4]
r0 = s0
call ram[0x80017ac:4]
r4 = r0
r5 = r1
*[ram]unique[0x17820:4] = register[0x34:4]
r2 = ram[0x8032e1c:4]
r1 = ram[0x8032e20:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
r3 = ram[0x8032e24:4]
s0 = *[ram]unique[0x42b0:4]
s15 = *[ram]unique[0x41f0:4]
goto ram[0x8032daa:4]
s0 = s0 f- s15
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xf800:1]) goto ram[0x8032da6:4]
sp = sp + unique[0xfdd0:4]
return pc
r3 = ram[0x8032e24:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
s15 = *[ram]unique[0x41f0:4]
if (unique[0xf740:1]) goto ram[0x8032daa:4]
s0 = s0 f+ s15
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xf720:1]) goto ram[0x8032dc8:4]
goto ram[0x8032daa:4]
s0 = *[ram]unique[0x42b0:4]
sp = sp + unique[0xfdd0:4]
return pc
r1 = ram[0x8032e2c:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
r1 = ram[0x8032e30:4]
tmpZR = r0 == 0x0
call ram[0x8015f20:4]
s0 = *[ram]unique[0x42b0:4]
goto ram[0x8032db4:4]
r2 = ram[0x8032e1c:4]
r1 = ram[0x8032e34:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
goto ram[0x8032d9a:4]
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
r0 = zext(unique[0x11f10:2])
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
*[ram]unique[0x114b0:4] = register[0x38:4]
r3 = ram[0x8032e78:4]
*[ram]unique[0x114b0:4] = register[0x38:4]
mult_addr = mult_addr + 0x4
r4 = ram[0x8033040:4]
NG = tmpNG
*[ram]unique[0x11480:4] = unique[0x176f0:2]
NG = tmpNG
r12 = r8
NG = tmpNG
NG = tmpNG
NG = tmpNG
mult_addr = mult_addr + 0x4
NG = tmpNG
r4 = ram[0x8033004:4]
NG = tmpNG
*[ram]unique[0x11480:4] = unique[0x176f0:2]
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r6 = ram[0x8032e94:4]
mult_addr = mult_addr + 0x8
s19 = *[ram]unique[0x42b0:4]
s18 = s0
s17 = s1
s16 = s2
r5 = r0
NG = tmpNG
s15 = r4
s3 = s17
s4 = CALLOTHER 0xc4, s15, unique[0x31a0:1]
s2 = 0x41700000
s1 = s18
r0 = r6
s0 = s19
call ram[0x8019a30:4]
s1 = s16
call ram[0x8015900:4]
OV = tmpOV
OV = tmpOV
r5 = r5 + unique[0x4020:4]
if (unique[0xf6c0:1]) goto ram[0x8032e5c:4]
mult_addr = mult_addr + 0x8
return pc

r4 = zext(unique[0x11ed0:1])
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r4 = ram[0x8032edc:4]
s1 = *[ram]unique[0x42b0:4]
s0 = *[ram]unique[0x42b0:4]
mult_addr = mult_addr + 0x8
s16 = r0
s2 = 0x41200000
r0 = r4
call ram[0x8032e40:4]
s1 = CALLOTHER 0xc4, s16, unique[0x31a0:1]
mult_addr = mult_addr + 0x8
tmpZR = r0 == 0x0
s0 = s1
sp = mult_addr
s2 = 0x41200000
goto ram[0x8032e40:4]

*[ram]unique[0x11440:4] = unique[0x176d0:2]
NG = tmpNG
NG = tmpNG
OV = tmpOV
NG = tmpNG
r2 = mult_addr
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r4 = ram[0x8032f3c:4]
mult_addr = mult_addr + 0x8
r0 = r4
s16 = s0
s17 = s1
s2 = 0x3f800000
call ram[0x8032e40:4]
s1 = s17
s0 = s16
tmpZR = r0 == 0x0
s2 = 0x3f800000
call ram[0x8032e40:4]
s1 = s17
s0 = s16
mult_addr = mult_addr + 0x8
tmpZR = r0 == 0x0
s2 = 0x3f800000
sp = mult_addr
goto ram[0x8032e40:4]

