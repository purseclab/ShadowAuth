sp = mult_addr
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
mult_addr = mult_addr + 0x8
s15 = 0x3f800000
unique[0xfcc0:1] = unique[0xfc90:1] && unique[0xfca0:1]
s16 = 0x0 f- s0
s16 = s0
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
s17 = s0
r4 = r0
*[ram]unique[0x4230:4] = register[0x300:4]
if (unique[0xf890:1]) goto ram[0x80280c8:4]
r3 = *[ram]unique[0x11420:4]
OV = tmpOV
s16 = s15
if (unique[0xf6a0:1]) goto ram[0x80280e4:4]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x80280fc:4]
s0 = 0x3f800000
r0 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11420:4]
call [pc]
r0 = *[ram]unique[0x11420:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
r3 = *[ram]unique[0x11420:4]
OV = unique[0x4780:1] & 0x1
r3 = *[ram]unique[0x11420:4]
if (unique[0xf890:1]) goto ram[0x80280ee:4]
s0 = s16
call [pc]
r0 = *[ram]unique[0x11420:4]
s16 = *[ram]unique[0x42b0:4]
r3 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11420:4]
s0 = s16
call [pc]
mult_addr = mult_addr + 0x8
NG = tmpNG
return pc
s14 = *[ram]unique[0x42b0:4]
s15 = *[ram]unique[0x42b0:4]
r3 = *[ram]unique[0x11420:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
unique[0xfb40:1] = NG != 0x0
s16 = s15
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x802808a:4]
s0 = s16
s16 = 0x3f800000
goto ram[0x8028092:4]
s0 = *[ram]unique[0x42b0:4]
call [pc]
r0 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11420:4]
goto ram[0x80280ba:4]
s16 = 0x3f800000
s0 = s16
goto ram[0x8028092:4]

NG = tmpNG
NG = tmpNG
if (unique[0xf780:1]) goto ram[0x8028124:4]
OV = tmpOV
s0 = *[ram]unique[0x4230:4]
return pc

NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
s15 = *[ram]unique[0x4230:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
unique[0xfc20:1] = NG == OV
tmpZR = r0 == 0x0
tmpZR = r0 == 0x0
return pc
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
s12 = *[ram]unique[0x4230:4]
s15 = *[ram]unique[0x4230:4]
s14 = *[ram]unique[0x42b0:4]
s13 = s0 f/ s12
CALLOTHER 0x1, 0xa, 0xe, 0x4, cr7, cr6, cr7
s0 = s15
return pc

NG = tmpNG
r2 = r2 + unique[0xfd40:4]
r3 = ram[0x8028178:4]
s14 = *[ram]unique[0x42b0:4]
s13 = *[ram]unique[0x4230:4]
s15 = *[ram]unique[0x42b0:4]
s0 = s13 f/ s14
s0 = s0 f* s15
return pc
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
NG = tmpNG
OV = tmpOV
*[ram]unique[0x11480:4] = register[0x30:4]
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
r3 = *[ram]unique[0x11420:4]
r1 = ram[0x80281cc:4]
r2 = *[ram]unique[0x11420:4]
OV = tmpOV
sp = mult_addr
r4 = r0
if (unique[0xf6c0:1]) goto ram[0x80281c4:4]
r2 = ram[0x80281d0:4]
s14 = *[ram]unique[0x42b0:4]
s13 = *[ram]unique[0x4230:4]
s15 = *[ram]unique[0x42b0:4]
s0 = s13 f/ s14
s0 = s0 f* s15
r3 = *[ram]unique[0x11420:4]
*[ram]unique[0x4230:4] = register[0x300:4]
r0 = r4
call [pc]
*[ram]unique[0x4230:4] = register[0x300:4]
return pc
call [pc]
r3 = *[ram]unique[0x11420:4]
goto ram[0x80281b4:4]

*[ram]unique[0x11440:4] = unique[0x176d0:2]
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
NG = tmpNG
OV = tmpOV
*[ram]unique[0x11480:4] = register[0x30:4]
OV = tmpOV
NG = tmpNG
NG = tmpNG
r3 = ram[0x8028210:4]
s0 = *[ram]unique[0x42b0:4]
r3 = zext(unique[0x12120:1])
s15 = r3
s15 = CALLOTHER 0xc5, s15, unique[0x3240:1]
s13 = 0x41200000
s14 = s15 f/ s13
s15 = 0x40a00000
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
unique[0xfb60:1] = NG != 0x0
s0 = s14
return pc

r0 = zext(unique[0x11eb0:1])
NG = tmpNG
OV = tmpOV
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r3 = *[ram]unique[0x11420:4]
r4 = r0
mult_addr = mult_addr + 0x8
r3 = *[ram]unique[0x11420:4]
s18 = s0
s0 = s1
r5 = r1
call [pc]
r2 = *[ram]unique[0x11420:4]
