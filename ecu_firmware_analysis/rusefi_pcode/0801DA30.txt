sp = mult_addr + 0x4
sp = sp - unique[0xfdd0:4]
OV = tmpOV
r7 = *[ram]unique[0x114b0:4]
*[ram]unique[0x114b0:4] = register[0x24:4]
r5 = r0
*[ram]unique[0x11420:4] = register[0x24:4]
if (unique[0xf890:1]) goto ram[0x801da8a:4]
tmpZR = r9 == 0x0
r8 = r2
tmpZR = r10 == 0x0
tmpZR = r6 == 0x0
tmpZR = r7 == 0x0
tmpZR = r11 == 0x0
r3 = *[ram]unique[0x11420:4]
r2 = *[ram]unique[0x112d0:4]
tmpZR = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x801da96:4]
r3 = r3 + r1
*[ram]unique[0x11420:4] = register[0x28:4]
r4 = r9
r2 = *[ram]unique[0x11420:4]
OV = tmpOV
r3 = *[ram]unique[0x11340:4]
r0 = r0 + r2
r1 = r11
r2 = zext(unique[0x121f0:1])
call ram[0x80158e0:4]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x801da6a:4]
OV = tmpOV
tmpZR = r11 == 0x0
if (unique[0xf6c0:1]) goto ram[0x801da58:4]
r3 = zext(unique[0x11eb0:1])
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x801daa2:4]
sp = sp + unique[0xfdd0:4]
return pc
r1 = ram[0x801dab8:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
goto ram[0x801da68:4]
r1 = *[ram]unique[0x114b0:4]
tmpZR = r0 == 0x0
s0 = 0x3f800000
sp = sp + unique[0xfdd0:4]
sp = mult_addr
goto ram[0x8015800:4]

sp = mult_addr
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
mult_addr = mult_addr + 0x8
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
sp = sp - unique[0xfdd0:4]
if (unique[0xf820:1]) goto ram[0x801dba2:4]
s15 = 0x3f800000
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xf7b0:1]) goto ram[0x801dba2:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
s16 = s0
if (unique[0xf720:1]) goto ram[0x801dbcc:4]
r5 = r3
r6 = r2
r3 = *[ram]unique[0x11420:4]
*[ram]unique[0x4230:4] = register[0x33c:4]
tmpZR = r2 == 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]
r3 = *[ram]unique[0x11420:4]
*[ram]unique[0x4230:4] = register[0x304:4]
s0 = s1
r4 = r0
call [pc]
r2 = unique[0xfdc0:4]
r3 = ram[0x801dbe4:4]
*[ram]unique[0x114b0:4] = register[0x28:4]
r2 = s16
OV = tmpOV
*[ram]unique[0x11420:4] = register[0x34:4]
tmpZR = r5 == 0x0
if (unique[0xf6a0:1]) goto ram[0x801dbc0:4]
s15 = *[ram]unique[0x42b0:4]
s15 = s15 f/ s16
r0 = s15
call ram[0x80020dc:4]
OV = tmpOV
tmpZR = r2 == 0x0
OV = tmpOV
tmpZR = r2 == 0x0
NG = tmpNG
NG = tmpNG
OV = tmpOV
tmpZR = r1 == 0x0
tmpZR = r1 == 0x0
NG = tmpNG
tmpZR = r1 == 0x0
NG = tmpNG
call ram[0x8002060:4]
s15 = r0
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
NG = tmpNG
OV = unique[0x4780:1] & 0x1
*[ram]unique[0x11420:4] = register[0x38:4]
*[ram]unique[0x11420:4] = register[0x20:4]
*[ram]unique[0x11460:4] = unique[0x17690:1]
if (unique[0xf6a0:1]) goto ram[0x801dbb4:4]
r1 = *[ram]unique[0x114b0:4]
NG = tmpNG
NG = tmpNG
r2 = unique[0xfdc0:4]
*[ram]unique[0x17820:4] = register[0x24:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
NG = tmpNG
*[ram]unique[0x114b0:4] = register[0x28:4]
r0 = r5
r2 = unique[0xfdc0:4]
call ram[0x801da30:4]
r2 = ram[0x801dbec:4]
*[ram]unique[0x11420:4] = register[0x38:4]
tmpZR = r3 == 0x0
r0 = r5
*[ram]unique[0x11420:4] = register[0x28:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
call ram[0x8015d50:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
r1 = ram[0x801dbf0:4]
tmpZR = r0 == 0x0
