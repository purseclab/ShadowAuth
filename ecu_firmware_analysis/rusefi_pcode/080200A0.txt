r3 = r0
r0 = *[ram]unique[0x11420:4]
sp = mult_addr
if (unique[0x11bf0:1]) goto ram[0x80200da:4]
r4 = s1
r2 = ram[0x80200ec:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x80200c8:4]
s1 = s0
r1 = *[ram]unique[0x11420:4]
s0 = r4
OV = tmpOV
call ram[0x800fac0:4]
s0 = s0 f+ s0
return pc
r2 = *[ram]unique[0x11420:4]
r1 = ram[0x80200f0:4]
tmpZR = r0 == 0x0
call ram[0x8015f20:4]
s0 = *[ram]unique[0x42b0:4]
return pc
r1 = ram[0x80200f8:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
s0 = *[ram]unique[0x42b0:4]
return pc

NG = tmpNG
r0 = zext(unique[0x11eb0:1])
r2 = mult_addr
NG = tmpNG
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
mult_addr = mult_addr + 0x4
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r4 = ram[0x80202c0:4]
r3 = *[ram]unique[0x112a0:4]
OV = tmpOV
sp = sp - unique[0xfdd0:4]
if (unique[0xf8b0:1]) goto ram[0x80202ba:4]
r2 = ram[0x80202c4:4]
OV = tmpOV
if (unique[0xf8b0:1]) goto ram[0x80202b6:4]
OV = tmpOV
r6 = ram[0x80202c8:4]
unique[0xfae0:1] = ZR != 0x0
tmpZR = r6 == 0x0
r2 = zext(unique[0x12120:1])
r3 = ram[0x80202cc:4]
r0 = ram[0x80202d0:4]
r7 = zext(unique[0x12120:1])
r5 = ram[0x80202d4:4]
r1 = ram[0x80202d8:4]
CY = shift_carry
unique[0xfae0:1] = ZR != 0x0
r2 = r0
r2 = r3
CY = shift_carry
unique[0xfae0:1] = ZR != 0x0
r3 = r0
r0 = *[ram]unique[0x11420:4]
call ram[0x8016520:4]
r3 = ram[0x80202dc:4]
r7 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11420:4]
tmpZR = r3 == 0x0
r0 = *[ram]unique[0x11420:4]
call ram[0x80017ac:4]
r2 = r6
*[ram]unique[0x17820:4] = register[0x24:4]
r1 = ram[0x80202e0:4]
