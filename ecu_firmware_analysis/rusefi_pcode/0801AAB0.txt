sp = mult_addr
OV = tmpOV
r3 = ram[0x801ab00:4]
r4 = *[ram]unique[0x120f0:4]
mult_addr = mult_addr + 0x8
if (unique[0x11bf0:1]) goto ram[0x801aaea:4]
s16 = *[ram]unique[0x41f0:4]
r0 = ram[0x801ab04:4]
s0 = s16
r1 = r4
r5 = r2
call ram[0x8019e70:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
mult_addr = mult_addr + 0x8
OV = unique[0x4780:1] & 0x1
unique[0xfae0:1] = ZR != 0x0
tmpZR = r0 == 0x0
tmpZR = r0 == 0x0
*[ram]unique[0x41f0:4] = register[0x300:4]
return pc
r2 = r1
tmpZR = r0 == 0x0
r1 = ram[0x801ab08:4]
call ram[0x8015f20:4]
mult_addr = mult_addr + 0x8
r0 = r4
return pc

r3 = mult_addr
NG = tmpNG
CALLOTHER 0x11, 0x24
NG = tmpNG
r3 = mult_addr
NG = tmpNG
NG = tmpNG
NG = tmpNG
r3 = ram[0x801ad08:4]
r3 = zext(unique[0x11eb0:1])
if (unique[0x11bd0:1]) goto ram[0x801ab4a:4]
sp = mult_addr + 0x4
r6 = r0
sp = sp - unique[0xfdd0:4]
if (unique[0x11bf0:1]) goto ram[0x801ab4c:4]
r3 = sext(unique[0x12420:1])
r0 = ram[0x801ad0c:4]
OV = tmpOV
unique[0xfae0:1] = ZR != 0x0
tmpZR = r3 == 0x0
s0 = r3
r4 = r1
s0 = CALLOTHER 0xc5, s0, unique[0x3240:1]
r1 = r2
call ram[0x8019e70:4]
r3 = zext(unique[0x11eb0:1])
if (unique[0x11bd0:1]) goto ram[0x801ab5e:4]
r3 = *[ram]unique[0x11420:4]
if (unique[0x11bd0:1]) goto ram[0x801ab5e:4]
sp = sp + unique[0xfdd0:4]
return pc
return pc
r1 = ram[0x801ad10:4]
r2 = r0
tmpZR = r0 == 0x0
sp = sp + unique[0xfdd0:4]
sp = mult_addr
goto ram[0x8015f20:4]
CALLOTHER 0x1, 0xa, 0xf, 0x6, cr7, cr13, cr0
r3 = sext(unique[0x12420:1])
*[ram]unique[0x4230:4] = register[0x33c:4]
OV = tmpOV
r2 = s15
unique[0xfae0:1] = ZR != 0x0
tmpZR = r3 == 0x0
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x801ab44:4]
r9 = ram[0x801ad0c:4]
r11 = ram[0x801ada0:4]
r3 = *[ram]unique[0x112a0:4]
