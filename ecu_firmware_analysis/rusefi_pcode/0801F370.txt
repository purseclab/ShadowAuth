sp = sp - unique[0xfdd0:4]
sp = mult_addr + 0x4
sp = sp - unique[0xfdd0:4]
r4 = r0
r5 = unique[0xfdc0:4]
r0 = *[ram]unique[0x11420:4]
*[ram]unique[0x11340:4] = register[0x2c:4]
r7 = r2
r8 = *[ram]unique[0x112a0:4]
r6 = r1
call ram[0x8014cd0:4]
r2 = r0
r3 = r1
mult_addr = mult_addr + 0x4
OV = tmpOV
mult_addr = mult_addr + 0x4
tmpZR = r3 == 0x0
r1 = r6
r0 = r4
call [pc]
sp = sp + unique[0xfdd0:4]
sp = mult_addr
sp = sp + unique[0xfdd0:4]
return pc
sp = mult_addr
r5 = ram[0x801f3ec:4]
r3 = *[ram]unique[0x12270:4]
sp = sp - unique[0xfdd0:4]
NG = tmpNG
*[ram]unique[0x114b0:4] = register[0x20:4]
if (unique[0xf6c0:1]) goto ram[0x801f3e6:4]
s15 = r0
r3 = ram[0x801f3f0:4]
s15 = CALLOTHER 0xc4, s15, unique[0x31a0:1]
r4 = r1
*[ram]unique[0x41f0:4] = register[0x33c:4]
call ram[0x8014cd0:4]
tmpZR = r3 == 0x0
r4 = r3 * r4
OV = tmpOV
tmpZR = r1 == 0x0
*[ram]unique[0x17820:4] = register[0x24:4]
sp = sp + unique[0xfdd0:4]
return pc

r0 = mult_addr
NG = tmpNG
r0 = mult_addr
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
tmpZR = r2 == 0x0
NG = tmpNG
r0 = ram[0x801f42c:4]
r4 = ram[0x801f430:4]
call ram[0x800557c:4]
call ram[0x8014cd0:4]
r2 = ram[0x801f434:4]
r1 = ram[0x801f438:4]
