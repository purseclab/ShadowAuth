r2 = ram[0x8021244:4]
r3 = s0
OV = tmpOV
sp = mult_addr
r4 = r0
if (unique[0xf6a0:1]) goto ram[0x802123c:4]
s15 = *[ram]unique[0x42b0:4]
s15 = s15 f/ s0
r0 = s15
call ram[0x80020dc:4]
r3 = r0
OV = tmpOV
tmpZR = r0 == 0x0
OV = tmpOV
tmpZR = r0 == 0x0
NG = tmpNG
NG = tmpNG
OV = tmpOV
tmpZR = r1 == 0x0
tmpZR = r1 == 0x0
NG = tmpNG
tmpZR = r1 == 0x0
NG = tmpNG
r0 = r3
call ram[0x8002060:4]
*[ram]unique[0x11420:4] = register[0x20:4]
return pc
r0 = ram[0x8021244:4]
*[ram]unique[0x11420:4] = register[0x20:4]
return pc

NG = tmpNG
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
r1 = ram[0x802141c:4]
NG = tmpNG
NG = tmpNG
sp = mult_addr
r6 = ram[0x80212ac:4]
r2 = ram[0x80212b0:4]
r3 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x112a0:4]
OV = tmpOV
mult_addr = mult_addr + 0x8
*[ram]unique[0x112a0:4] = unique[0x17850:2]
if (unique[0xf890:1]) goto ram[0x80212a6:4]
s15 = r0
r4 = ram[0x80212b4:4]
s16 = CALLOTHER 0xc4, s15, unique[0x31a0:1]
NG = tmpNG
r0 = r4
s0 = s16
call ram[0x80211f0:4]
tmpZR = r0 == 0x0
s0 = s16
call ram[0x80211f0:4]
tmpZR = r0 == 0x0
s0 = s16
call ram[0x80211f0:4]
r3 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x112a0:4]
OV = tmpOV
OV = tmpOV
tmpZR = r4 == 0x0
if (unique[0xf860:1]) goto ram[0x8021274:4]
mult_addr = mult_addr + 0x8
return pc
NG = tmpNG
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
NG = tmpNG
NG = tmpNG
NG = tmpNG
*[ram]unique[0x17820:4] = register[0x3c:4]
