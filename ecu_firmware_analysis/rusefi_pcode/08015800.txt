sp = mult_addr
r3 = *[ram]unique[0x11420:4]
tmpZR = r2 == 0x0
mult_addr = mult_addr + 0x8
s17 = *[ram]unique[0x4210:4]
s15 = 0x3f800000
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
sp = sp - unique[0xfdd0:4]
if (unique[0xf6c0:1]) goto ram[0x8015882:4]
OV = tmpOV
if (unique[0xf890:1]) goto ram[0x801587a:4]
r7 = ram[0x80158cc:4]
r6 = r0
OV = tmpOV
NG = tmpNG
goto ram[0x8015836:4]
OV = tmpOV
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x801587a:4]
r3 = *[ram]unique[0x11420:4]
tmpZR = r3 == 0x0
s16 = *[ram]unique[0x41f0:4]
s15 = *[ram]unique[0x4230:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xf820:1]) goto ram[0x801582e:4]
r0 = s15
call ram[0x80017ac:4]
r2 = r0
r3 = r1
r0 = s16
*[ram]unique[0x17820:4] = register[0x2c:4]
call ram[0x80017ac:4]
r2 = r4
*[ram]unique[0x17820:4] = register[0x24:4]
OV = tmpOV
r1 = r7
tmpZR = r0 == 0x0
call ram[0x8015240:4]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x8015834:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
r0 = s0
s16 = s0
call ram[0x80017ac:4]
s15 = s17 f* s16
r2 = r0
r3 = r1
r0 = s15
*[ram]unique[0x17820:4] = register[0x2c:4]
call ram[0x80017ac:4]
r4 = r0
r5 = r1
r0 = s17
*[ram]unique[0x17820:4] = register[0x34:4]
call ram[0x80017ac:4]
r3 = *[ram]unique[0x12270:4]
*[ram]unique[0x17820:4] = register[0x24:4]
r1 = ram[0x80158d0:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
sp = mult_addr
NG = tmpNG
sp = mult_addr
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
OV = tmpOV
if (unique[0xf7b0:1]) goto ram[0x80158ea:4]
r3 = *[ram]unique[0x11420:4]
*[ram]unique[0x11480:4] = unique[0x176b0:1]
return pc
r1 = ram[0x80158f4:4]
tmpZR = r0 == 0x0
goto ram[0x8015240:4]
sp = mult_addr
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
mult_addr = mult_addr + 0x8
if (unique[0xf6a0:1]) goto ram[0x8015942:4]
s0 = s0 f/ s1
s16 = s1
call ram[0x8000398:4]
s0 = s16 f* s0
r3 = s0
OV = tmpOV
if (unique[0xf820:1]) goto ram[0x801592e:4]
mult_addr = mult_addr + 0x8
return pc
mult_addr = mult_addr + 0x8
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
unique[0xfac0:1] = ZR != 0x0
s0 = *[ram]unique[0x42b0:4]
return pc
r1 = ram[0x801595c:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
mult_addr = mult_addr + 0x8
s0 = *[ram]unique[0x42b0:4]
return pc

NG = tmpNG
NG = tmpNG
sp = mult_addr
NG = tmpNG
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
OV = tmpOV
mult_addr = mult_addr + 0x8
s14 = r3
s18 = *[ram]unique[0x42b0:4]
s16 = s0
s17 = s1
s15 = s16 f- s18
s14 = CALLOTHER 0xc4, s14, unique[0x31a0:1]
s0 = s17 f- s0
r4 = r0
r4 = r4 + unique[0x4020:4]
s0 = s0 f/ s14
r6 = r1
r5 = r0
s1 = *[ram]unique[0x42b0:4]
call ram[0x8015900:4]
s15 = s0 f- s18
tmpZR = r2 == 0x0
CALLOTHER 0x1, 0xa, 0xf, 0x7, cr7, cr13, cr7
OV = tmpOV
r1 = s15
NG = tmpNG
s15 = r3
s15 = CALLOTHER 0xc4, s15, unique[0x31a0:1]
r3 = r3 + r1
s15 = s15 f+ s16
r4 = r4 + unique[0x4020:4]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x80159be:4]
*[ram]unique[0x41f0:4] = register[0x344:4]
mult_addr = mult_addr + 0x8
return pc

NG = tmpNG
NG = tmpNG
NG = tmpNG
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
r0 = ram[0x80159f8:4]
NG = tmpNG
goto ram[0x8015970:4]
r1 = mult_addr
NG = tmpNG
NG = tmpNG
NG = tmpNG
s1 = *[ram]unique[0x42b0:4]
s0 = *[ram]unique[0x42b0:4]
goto ram[0x8015970:4]
r0 = mult_addr
OV = tmpOV
NG = tmpNG
r0 = r0 + r9
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr + 0x4
r10 = ram[0x8015ad0:4]
r4 = r0
r9 = r1
r8 = r2
r7 = r3
tmpZR = r11 == 0x0
tmpZR = r6 == 0x0
r0 = r4
call ram[0x80148e0:4]
tmpZR = r3 == 0x0
OV = tmpOV
