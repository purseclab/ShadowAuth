sp = mult_addr + 0x4
r0 = ram[0x8033258:4]
r6 = ram[0x803325c:4]
tmpZR = r4 == 0x0
mult_addr = mult_addr + 0x8
tmpZR = r2 == 0x0
NG = tmpNG
call ram[0x800557c:4]
tmpZR = r0 == 0x0
call ram[0x8031730:4]
tmpZR = r3 == 0x0
*[ram]unique[0x112a0:4] = register[0x2c:4]
NG = tmpNG
*[ram]unique[0x112a0:4] = unique[0x17850:2]
tmpZR = r3 == 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]
NG = tmpNG
*[ram]unique[0x112a0:4] = unique[0x17850:2]
tmpZR = r3 == 0x0
r1 = ram[0x8033260:4]
*[ram]unique[0x11420:4] = register[0x38:4]
tmpZR = r3 == 0x0
r6 = ram[0x8033264:4]
*[ram]unique[0x11420:4] = register[0x38:4]
tmpZR = r3 == 0x0
r6 = ram[0x8033268:4]
*[ram]unique[0x11420:4] = register[0x38:4]
tmpZR = r3 == 0x0
r2 = ram[0x803326c:4]
*[ram]unique[0x11420:4] = register[0x24:4]
tmpZR = r3 == 0x0
tmpZR = r1 == 0x0
*[ram]unique[0x11420:4] = register[0x28:4]
NG = tmpNG
tmpZR = r3 == 0x0
r2 = ram[0x8033270:4]
*[ram]unique[0x11420:4] = register[0x34:4]
s0 = *[ram]unique[0x42b0:4]
r0 = ram[0x8033278:4]
*[ram]unique[0x11420:4] = register[0x28:4]
call ram[0x800b670:4]
r0 = ram[0x803327c:4]
s0 = *[ram]unique[0x42b0:4]
call ram[0x800b670:4]
r3 = ram[0x8033284:4]
tmpZR = r1 == 0x0
tmpZR = r0 == 0x0
r2 = zext(unique[0x12150:1])
*[ram]unique[0x11460:4] = unique[0x17690:1]
OV = tmpOV
*[ram]unique[0x11460:4] = unique[0x17690:1]
*[ram]unique[0x11460:4] = unique[0x17690:1]
*[ram]unique[0x11460:4] = unique[0x17690:1]
*[ram]unique[0x11460:4] = unique[0x17690:1]
*[ram]unique[0x11460:4] = unique[0x17690:1]
*[ram]unique[0x11460:4] = unique[0x17690:1]
*[ram]unique[0x11460:4] = unique[0x17690:1]
tmpZR = r3 == 0x0
if (unique[0xf6c0:1]) goto ram[0x8032fd2:4]
r7 = ram[0x8033288:4]
r5 = ram[0x803328c:4]
lr = ram[0x8033344:4]
s0 = *[ram]unique[0x42b0:4]
r7 = mult_addr
tmpZR = r6 == 0x0
r6 = mult_addr
r3 = r5
tmpZR = r12 == 0x0
*[ram]unique[0x112d0:4] = register[0x50:4]
r1 = *[ram]unique[0x11420:4]
r2 = ram[0x8033270:4]
*[ram]unique[0x11420:4] = register[0x28:4]
*[ram]unique[0x11420:4] = register[0x24:4]
r3 = zext(unique[0x12120:1])
r1 = ram[0x8033290:4]
*[ram]unique[0x112a0:4] = register[0x24:4]
tmpZR = r3 == 0x0
tmpZR = r1 == 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]
tmpZR = r3 == 0x0
*[ram]unique[0x112a0:4] = register[0x50:4]
tmpZR = r1 == 0x0
*[ram]unique[0x112a0:4] = register[0x50:4]
tmpZR = r0 == 0x0
tmpZR = r3 == 0x0
*[ram]unique[0x11420:4] = register[0x20:4]
tmpZR = r1 == 0x0
tmpZR = r0 == 0x0
*[ram]unique[0x11420:4] = register[0x20:4]
tmpZR = r3 == 0x0
tmpZR = r0 == 0x0
*[ram]unique[0x11420:4] = register[0x20:4]
r1 = ram[0x8033294:4]
*[ram]unique[0x11420:4] = register[0x24:4]
tmpZR = r0 == 0x0
tmpZR = r3 == 0x0
tmpZR = r1 == 0x0
r2 = ram[0x8033298:4]
*[ram]unique[0x112a0:4] = register[0x58:4]
*[ram]unique[0x11420:4] = register[0x28:4]
tmpZR = r0 == 0x0
tmpZR = r3 == 0x0
r6 = ram[0x803329c:4]
*[ram]unique[0x11420:4] = register[0x38:4]
r12 = ram[0x8033348:4]
r2 = ram[0x80332a0:4]
*[ram]unique[0x112a0:4] = register[0x50:4]
tmpZR = r1 == 0x0
*[ram]unique[0x11420:4] = register[0x28:4]
tmpZR = r0 == 0x0
tmpZR = r2 == 0x0
r6 = ram[0x80332a4:4]
*[ram]unique[0x11420:4] = register[0x38:4]
tmpZR = r3 == 0x0
tmpZR = r6 == 0x0
r12 = ram[0x803334c:4]
r1 = ram[0x80332a8:4]
lr = ram[0x8033350:4]
*[ram]unique[0x112a0:4] = register[0x50:4]
*[ram]unique[0x11420:4] = register[0x24:4]
r0 = ram[0x80332ac:4]
r2 = ram[0x80332b0:4]
*[ram]unique[0x112a0:4] = register[0x58:4]
tmpZR = r1 == 0x0
tmpZR = r12 == 0x0
*[ram]unique[0x11420:4] = register[0x20:4]
NG = tmpNG
NG = tmpNG
r7 = ram[0x80332b4:4]
*[ram]unique[0x112a0:4] = unique[0x17850:2]
tmpZR = r6 == 0x0
*[ram]unique[0x112a0:4] = register[0x34:4]
r0 = ram[0x80332b8:4]
*[ram]unique[0x112a0:4] = unique[0x17850:2]
*[ram]unique[0x17820:4] = register[0x28:4]
*[ram]unique[0x112a0:4] = register[0x3c:4]
*[ram]unique[0x112a0:4] = register[0x38:4]
call ram[0x800b670:4]
r0 = ram[0x80332bc:4]
s0 = *[ram]unique[0x42b0:4]
call ram[0x800b670:4]
tmpZR = r5 == 0x0
tmpZR = r1 == 0x0
r0 = ram[0x80332bc:4]
OV = tmpOV
OV = tmpOV
r2 = zext(unique[0x12150:1])
tmpZR = r3 == 0x0
*[ram]unique[0x11340:4] = unique[0x17780:1]
OV = tmpOV
*[ram]unique[0x112a0:4] = unique[0x17760:1]
if (unique[0xf6c0:1]) goto ram[0x803310a:4]
OV = tmpOV
tmpZR = r1 == 0x0
if (unique[0xf6c0:1]) goto ram[0x8033102:4]
r3 = ram[0x80332c4:4]
r0 = ram[0x80332c8:4]
r2 = ram[0x80332cc:4]
*[ram]unique[0x11420:4] = register[0x20:4]
r0 = ram[0x80332d0:4]
*[ram]unique[0x11420:4] = register[0x28:4]
*[ram]unique[0x11420:4] = register[0x20:4]
tmpZR = r2 == 0x0
r0 = ram[0x80332d4:4]
*[ram]unique[0x11420:4] = register[0x20:4]
r5 = ram[0x80332d8:4]
r1 = ram[0x80332dc:4]
*[ram]unique[0x11420:4] = register[0x24:4]
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x34:4]
*[ram]unique[0x11420:4] = register[0x20:4]
tmpZR = r2 == 0x0
r0 = ram[0x80332e0:4]
*[ram]unique[0x11420:4] = register[0x20:4]
tmpZR = r2 == 0x0
r6 = ram[0x80332e4:4]
*[ram]unique[0x11420:4] = register[0x38:4]
tmpZR = r2 == 0x0
r1 = ram[0x80332e8:4]
*[ram]unique[0x11420:4] = register[0x24:4]
tmpZR = r2 == 0x0
tmpZR = r1 == 0x0
r5 = ram[0x80332ec:4]
r0 = ram[0x80332f0:4]
*[ram]unique[0x11420:4] = register[0x34:4]
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x20:4]
NG = tmpNG
tmpZR = r1 == 0x0
r0 = ram[0x80332f4:4]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = register[0x28:4]
OV = tmpOV
*[ram]unique[0x112a0:4] = unique[0x17760:1]
OV = tmpOV
NG = tmpNG
s15 = r2
*[ram]unique[0x112d0:4] = register[0x20:4]
s15 = CALLOTHER 0xc4, s15, unique[0x31a0:1]
OV = tmpOV
*[ram]unique[0x4230:4] = register[0x33c:4]
tmpZR = r2 == 0x0
if (unique[0xf6c0:1]) goto ram[0x8033184:4]
r3 = zext(unique[0x12120:1])
r2 = ram[0x80332f8:4]
r5 = ram[0x80332fc:4]
r1 = ram[0x8033300:4]
r0 = ram[0x8033304:4]
*[ram]unique[0x11420:4] = register[0x28:4]
tmpZR = r3 == 0x0
r2 = ram[0x8033308:4]
*[ram]unique[0x11420:4] = register[0x34:4]
tmpZR = r3 == 0x0
r5 = ram[0x803330c:4]
*[ram]unique[0x11420:4] = register[0x24:4]
*[ram]unique[0x11420:4] = register[0x20:4]
r1 = ram[0x8033310:4]
r0 = ram[0x8033314:4]
*[ram]unique[0x11420:4] = register[0x28:4]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
tmpZR = r2 == 0x0
r3 = ram[0x8033318:4]
*[ram]unique[0x11420:4] = register[0x24:4]
*[ram]unique[0x11420:4] = register[0x34:4]
r1 = ram[0x803331c:4]
r5 = ram[0x8033320:4]
*[ram]unique[0x11420:4] = register[0x20:4]
*[ram]unique[0x11420:4] = register[0x28:4]
r0 = ram[0x8033324:4]
r2 = ram[0x8033264:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
r3 = ram[0x8033328:4]
r6 = ram[0x803332c:4]
*[ram]unique[0x11420:4] = register[0x24:4]
*[ram]unique[0x11420:4] = register[0x34:4]
NG = tmpNG
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x20:4]
*[ram]unique[0x11420:4] = register[0x28:4]
tmpZR = r0 == 0x0
tmpZR = r2 == 0x0
*[ram]unique[0x11420:4] = register[0x2c:4]
r3 = ram[0x8033330:4]
*[ram]unique[0x112a0:4] = register[0x24:4]
*[ram]unique[0x112a0:4] = unique[0x17850:2]
*[ram]unique[0x11420:4] = register[0x38:4]
*[ram]unique[0x112a0:4] = register[0x34:4]
*[ram]unique[0x112a0:4] = register[0x20:4]
OV = tmpOV
NG = tmpNG
*[ram]unique[0x112d0:4] = unique[0x17780:1]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x8033210:4]
r2 = ram[0x8033334:4]
r0 = ram[0x8033338:4]
r5 = ram[0x803333c:4]
r3 = ram[0x8033340:4]
*[ram]unique[0x112a0:4] = register[0x20:4]
NG = tmpNG
*[ram]unique[0x11420:4] = register[0x24:4]
tmpZR = r1 == 0x0
*[ram]unique[0x112a0:4] = register[0x24:4]
NG = tmpNG
NG = tmpNG
NG = tmpNG
*[ram]unique[0x112a0:4] = unique[0x17850:2]
tmpZR = r1 == 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]
*[ram]unique[0x112a0:4] = register[0x38:4]
*[ram]unique[0x112a0:4] = register[0x34:4]
OV = tmpOV
tmpZR = r2 == 0x0
tmpZR = r0 == 0x0
goto ram[0x8033354:4]

r0 = zext(unique[0x11eb0:1])
NG = tmpNG
NG = tmpNG
OV = tmpOV
r4 = mult_addr
OV = tmpOV
NG = tmpNG
OV = tmpOV
NG = tmpNG
NG = tmpNG
r4 = mult_addr
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
OV = tmpOV
*[ram]unique[0x114b0:4] = register[0x38:4]
NG = tmpNG
*[ram]unique[0x114b0:4] = register[0x38:4]
NG = tmpNG
NG = tmpNG
NG = tmpNG
*[ram]unique[0x114b0:4] = register[0x38:4]
NG = tmpNG
r3 = ram[0x803334c:4]
NG = tmpNG
*[ram]unique[0x11440:4] = unique[0x176d0:2]
NG = tmpNG
d16 = CALLOTHER 0xef, d14, 0x1e
NG = tmpNG
NG = tmpNG
NG = tmpNG
OV = tmpOV
NG = tmpNG
OV = tmpOV
NG = tmpNG
r1 = mult_addr
NG = tmpNG
r1 = mult_addr
NG = tmpNG
OV = tmpOV
NG = tmpNG
NG = tmpNG
