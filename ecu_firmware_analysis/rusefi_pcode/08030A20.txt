sp = mult_addr + 0x4
mult_addr = mult_addr + 0x8
r6 = *[ram]unique[0x112a0:4]
sp = sp - unique[0xfdd0:4]
OV = tmpOV
if (unique[0xf8b0:1]) goto ram[0x8030b7c:4]
r3 = zext(unique[0x12120:1])
OV = tmpOV
r4 = r0
r8 = r1
r7 = r2
s16 = s0
unique[0xfac0:1] = ZR != 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x8030ae8:4]
r3 = zext(unique[0x12120:1])
*[ram]unique[0x114b0:4] = register[0x28:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8030afa:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8030afa:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xf890:1]) goto ram[0x8030b10:4]
r5 = *[ram]unique[0x112a0:4]
tmpZR = r3 == 0x0
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8030b24:4]
s17 = *[ram]unique[0x41f0:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xfa10:1]) goto ram[0x8030b90:4]
OV = tmpOV
*[ram]unique[0x41f0:4] = register[0x340:4]
if (unique[0xfaa0:1]) goto ram[0x8030c84:4]
r3 = *[ram]unique[0x11420:4]
*[ram]unique[0x114b0:4] = register[0x2c:4]
r11 = 0x8030cc8
r11 = *[ram]unique[0x12270:4]
r9 = r3
NG = tmpNG
goto ram[0x8030aa4:4]
OV = tmpOV
if (unique[0xf8b0:1]) goto ram[0x8030c08:4]
r6 = r3
r9 = r9 + unique[0x4020:4]
s15 = s15 f- s16
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
unique[0xfcc0:1] = unique[0xfc90:1] && unique[0xfca0:1]
s15 = 0x0 f- s15
r0 = s15
call ram[0x80017ac:4]
r3 = r11
r2 = r10
call ram[0x8001d40:4]
OV = tmpOV
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8030a9c:4]
r1 = ram[0x8030ca8:4]
tmpZR = r0 == 0x0
call ram[0x8015f20:4]
NG = tmpNG
*[ram]unique[0x11460:4] = unique[0x17690:1]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
tmpZR = r10 == 0x0
r3 = zext(unique[0x1a110:1])
*[ram]unique[0x114b0:4] = register[0x2c:4]
r3 = zext(unique[0x12120:1])
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x8030a56:4]
tmpZR = r2 == 0x0
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
r3 = *[ram]unique[0x11420:4]
OV = unique[0x4780:1] & 0x1
tmpZR = r3 == 0x0
*[ram]unique[0x11420:4] = register[0x2c:4]
if (unique[0xf860:1]) goto ram[0x8030a64:4]
r1 = ram[0x8030cac:4]
tmpZR = r0 == 0x0
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
sp = mult_addr
goto ram[0x8015240:4]
NG = tmpNG
*[ram]unique[0x41f0:4] = register[0x340:4]
tmpZR = r6 == 0x0
*[ram]unique[0x112a0:4] = register[0x28:4]
r0 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11480:4]
NG = tmpNG
r0 = r0 + r5
OV = tmpOV
OV = tmpOV
if (unique[0xf8b0:1]) goto ram[0x8030c74:4]
r2 = zext(unique[0x12150:1])
call ram[0x80158e0:4]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x8030b32:4]
tmpZR = r7 == 0x0
NG = tmpNG
tmpZR = r0 == 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]
s0 = s16
call ram[0x80157e0:4]
r0 = *[ram]unique[0x11420:4]
r2 = *[ram]unique[0x114b0:4]
tmpZR = r0 == 0x0
NG = tmpNG
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
sp = mult_addr
goto ram[0x80158e0:4]
r1 = ram[0x8030cb0:4]
tmpZR = r0 == 0x0
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
sp = mult_addr
goto ram[0x8015240:4]
r0 = s16
call ram[0x80017ac:4]
OV = tmpOV
OV = tmpOV
r3 = r1
unique[0xfc00:1] = CY && unique[0xfbe0:1]
r1 = ram[0x8030cb4:4]
s18 = *[ram]unique[0x42b0:4]
*[ram]unique[0x114b0:4] = register[0x34:4]
unique[0xfc00:1] = CY && unique[0xfbe0:1]
tmpZR = r6 == 0x0
s18 = *[ram]unique[0x41f0:4]
s15 = s17 f* s18
r2 = r0
r0 = s15
*[ram]unique[0x17820:4] = register[0x2c:4]
call ram[0x80017ac:4]
r6 = r0
r7 = r1
r0 = s17
*[ram]unique[0x17820:4] = register[0x3c:4]
call ram[0x80017ac:4]
s15 = s16 f* s18
r6 = r0
r7 = r1
r0 = s15
*[ram]unique[0x17820:4] = register[0x3c:4]
call ram[0x80017ac:4]
r3 = *[ram]unique[0x12270:4]
*[ram]unique[0x17820:4] = register[0x24:4]
r1 = ram[0x8030cbc:4]
tmpZR = r0 == 0x0
call ram[0x8015f20:4]
NG = tmpNG
*[ram]unique[0x11460:4] = unique[0x17690:1]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
r3 = *[ram]unique[0x114b0:4]
tmpZR = r11 == 0x0
goto ram[0x8030c14:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x8030c84:4]
r11 = unique[0x40f0:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
r9 = r6
tmpZR = r6 == 0x0
if (unique[0xf890:1]) goto ram[0x8030c10:4]
tmpZR = r6 == 0x0
OV = tmpOV
tmpZR = r7 == 0x0
OV = tmpOV
*[ram]unique[0x112a0:4] = unique[0x17760:1]
r3 = r6
if (unique[0xf6c0:1]) goto ram[0x8030c92:4]
OV = tmpOV
*[ram]unique[0x112a0:4] = register[0x2c:4]
NG = tmpNG
r0 = *[ram]unique[0x11420:4]
r3 = *[ram]unique[0x11480:4]
r1 = r6
r0 = r0 + r5
r2 = zext(unique[0x121f0:1])
OV = tmpOV
call ram[0x80158e0:4]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x8030c44:4]
r1 = r6
tmpZR = r0 == 0x0
s0 = s16
call ram[0x80157e0:4]
r0 = *[ram]unique[0x11420:4]
r2 = *[ram]unique[0x114b0:4]
tmpZR = r0 == 0x0
r1 = r6
goto ram[0x8030b6e:4]
r1 = ram[0x8030cc0:4]
tmpZR = r0 == 0x0
call ram[0x8015f20:4]
NG = tmpNG
*[ram]unique[0x11460:4] = unique[0x17690:1]
goto ram[0x8030ade:4]
tmpZR = r7 == 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]
tmpZR = r9 == 0x0
NG = tmpNG
r1 = ram[0x8030cc4:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
r3 = *[ram]unique[0x112a0:4]
goto ram[0x8030c3c:4]


goto [pc]
NG = tmpNG
r12 = r7
NG = tmpNG
r12 = r4
NG = tmpNG
*[ram]unique[0x11460:4] = unique[0x17690:1]
NG = tmpNG
NG = tmpNG
r4 = r4 + r6
r8 = r11
NG = tmpNG
goto [pc]
NG = tmpNG
goto [pc]
NG = tmpNG
NG = tmpNG
OV = tmpOV
OV = tmpOV
r3 = *[ram]unique[0x112a0:4]
s15 = *[ram]unique[0x42b0:4]
s14 = *[ram]unique[0x42b0:4]
OV = tmpOV
unique[0xfae0:1] = ZR != 0x0
s15 = s14
s0 = s0 f/ s15
goto ram[0x8030a20:4]
NG = tmpNG
NG = tmpNG
NG = tmpNG
r4 = r4 + r6
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xf890:1]) goto ram[0x8030d14:4]
fpscr = unique[0x2f70:4] | unique[0x2f90:4]
OV = unique[0x4780:1] & 0x1
if (unique[0xf720:1]) goto ram[0x8030d16:4]
return pc
goto ram[0x8030cd0:4]

NG = tmpNG
NG = tmpNG
sp = mult_addr
OV = tmpOV
OV = tmpOV
OV = tmpOV
mult_addr = mult_addr + 0x8
s15 = r2
r6 = r0
r5 = r1
s17 = s1
s22 = s2
s18 = s3
s19 = s4
if (unique[0xf890:1]) goto ram[0x8030de6:4]
s14 = CALLOTHER 0xc4, s15, unique[0x31a0:1]
s15 = 0x3f800000
s20 = s2 f/ s14
NG = tmpNG
s21 = s15 f- s0
s16 = *[ram]unique[0x42b0:4]
s16 = s16 f+ s21
s0 = s17
CALLOTHER 0x1, 0xa, 0xa, 0x0, cr0, cr10, cr8
OV = tmpOV
NG = tmpNG
r1 = r6
s2 = s19
s1 = s18
r0 = r5
call ram[0x8030d00:4]
s15 = r4
s16 = CALLOTHER 0xc4, s15, unique[0x31a0:1]
s0 = s17
CALLOTHER 0x1, 0xa, 0xa, 0x0, cr0, cr10, cr8
NG = tmpNG
r1 = r6
s2 = s19
s1 = s18
r0 = r5
call ram[0x8030d00:4]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x8030d5c:4]
s15 = r7
s15 = CALLOTHER 0xc4, s15, unique[0x31a0:1]
s0 = s17
s15 = s15 f+ s21
s2 = s19
CALLOTHER 0x1, 0xa, 0xa, 0x4, cr0, cr7, cr10
r1 = r6
r0 = r5
s1 = s18
NG = tmpNG
call ram[0x8030d00:4]
s0 = s22 f+ s17
s2 = s19
s1 = s18
mult_addr = mult_addr + 0x8
r1 = r6
r0 = r5
NG = tmpNG
sp = mult_addr
goto ram[0x8030d00:4]
s15 = CALLOTHER 0xc4, s15, unique[0x31a0:1]
s21 = 0x3f800000
s20 = s2 f/ s15
s21 = s21 f- s0
goto ram[0x8030da2:4]
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r4 = r0
r6 = r1
NG = tmpNG
call ram[0x8030240:4]
NG = tmpNG
r3 = ram[0x8030ef4:4]
s0 = *[ram]unique[0x42b0:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
*[ram]unique[0x11460:4] = unique[0x17690:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
*[ram]unique[0x112a0:4] = unique[0x17760:1]
r0 = r4
s1 = 0x41800000
call ram[0x8030230:4]
if (unique[0x11bd0:1]) goto ram[0x8030ea0:4]
s0 = *[ram]unique[0x42b0:4]
r2 = r5
r1 = r6
r0 = r4
call ram[0x8030a20:4]
NG = tmpNG
r1 = r2
r0 = r4
s0 = 0x3e800000
call ram[0x8030a20:4]
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r1 = r2
r0 = r4
s0 = 0x3f000000
call ram[0x8030a20:4]
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r1 = r2
r0 = r4
s0 = 0x3f400000
call ram[0x8030a20:4]
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
sp = mult_addr
s0 = 0x3f800000
goto ram[0x8030a20:4]
s3 = *[ram]unique[0x42b0:4]
s4 = *[ram]unique[0x42b0:4]
s2 = *[ram]unique[0x42b0:4]
s1 = s3
NG = tmpNG
r1 = r4
r0 = r5
s0 = 0x3f000000
tmpZR = r2 == 0x0
call ram[0x8030d20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
s4 = *[ram]unique[0x42b0:4]
s3 = *[ram]unique[0x42b0:4]
s2 = *[ram]unique[0x42b0:4]
s1 = *[ram]unique[0x42b0:4]
r0 = r5
s0 = 0x3f000000
NG = tmpNG
tmpZR = r2 == 0x0
r1 = r4
call ram[0x8030d20:4]
goto ram[0x8030e3a:4]
*[ram]unique[0x11440:4] = unique[0x176d0:2]
r5 = r5 + r3
NG = tmpNG
NG = tmpNG
OV = tmpOV
OV = tmpOV
NG = tmpNG
OV = tmpOV
*[ram]unique[0x114b0:4] = register[0x2c:4]
OV = tmpOV
*[ram]unique[0x114b0:4] = register[0x2c:4]
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
r4 = r4 + r6
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
r3 = *[ram]unique[0x112a0:4]
OV = tmpOV
OV = tmpOV
if (unique[0xf7b0:1]) goto ram[0x8030f42:4]
sp = mult_addr
r4 = ram[0x8030f50:4]
tmpZR = r3 == 0x0
s15 = *[ram]unique[0x41f0:4]
sp = sp + 0x4
s0 = s0 f/ s15
goto ram[0x8030a20:4]
s15 = *[ram]unique[0x42b0:4]
s0 = s0 f/ s15
goto ram[0x8030a20:4]

*[ram]unique[0x11460:4] = unique[0x17690:1]
NG = tmpNG
NG = tmpNG
r4 = r4 + r6
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
r3 = *[ram]unique[0x112a0:4]
OV = tmpOV
OV = tmpOV
mult_addr = mult_addr + 0x8
r5 = r0
if (unique[0xf7b0:1]) goto ram[0x8030ff2:4]
r2 = ram[0x8030ffc:4]
tmpZR = r3 == 0x0
s14 = *[ram]unique[0x41f0:4]
s15 = 0x41b00000
s17 = s14 f/ s15
s18 = 0x3f000000
s18 = s17 f* s18
s16 = *[ram]unique[0x42b0:4]
NG = tmpNG
s0 = s16 f+ s18
NG = tmpNG
NG = tmpNG
r0 = r5
call ram[0x8030f20:4]
s16 = s16 f+ s17
NG = tmpNG
s0 = s16
r1 = r2
r0 = r5
call ram[0x8030f20:4]
OV = tmpOV
if (unique[0xf6c0:1]) goto ram[0x8030f92:4]
s0 = s16 f+ s17
NG = tmpNG
r1 = r4
r0 = r5
call ram[0x8030f20:4]
r3 = *[ram]unique[0x112a0:4]
mult_addr = mult_addr + 0x8
OV = tmpOV
OV = tmpOV
unique[0xfc00:1] = CY && unique[0xfbe0:1]
r2 = ram[0x8030ffc:4]
s0 = *[ram]unique[0x42b0:4]
tmpZR = r3 == 0x0
tmpZR = r2 == 0x0
unique[0xfc00:1] = CY && unique[0xfbe0:1]
s0 = *[ram]unique[0x41f0:4]
r0 = r5
r1 = r2
sp = mult_addr
goto ram[0x8030f20:4]
s17 = *[ram]unique[0x42b0:4]
s18 = *[ram]unique[0x42b0:4]
goto ram[0x8030f8c:4]
*[ram]unique[0x11460:4] = unique[0x17690:1]
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
r4 = r4 + r6
r10 = mult_addr
r10 = mult_addr
sp = mult_addr
NG = tmpNG
r4 = r0
NG = tmpNG
call ram[0x8030240:4]
r3 = ram[0x80312e4:4]
*[ram]unique[0x11420:4] = register[0x2c:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
*[ram]unique[0x11460:4] = unique[0x17690:1]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
r1 = r2
s0 = *[ram]unique[0x42b0:4]
call ram[0x8030a20:4]
r2 = r5
r0 = r4
s0 = *[ram]unique[0x42b0:4]
NG = tmpNG
call ram[0x8030a20:4]
NG = tmpNG
r0 = r4
