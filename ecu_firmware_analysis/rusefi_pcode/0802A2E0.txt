sp = mult_addr
mult_addr = mult_addr + 0x8
r4 = r0
sp = sp - unique[0xfdd0:4]
r0 = *[ram]unique[0x11420:4]
*[ram]unique[0x114b0:4] = register[0x24:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x802a3b8:4]
r6 = ram[0x802a3d0:4]
r3 = zext(unique[0x12120:1])
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x802a38c:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x802a39a:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x802a392:4]
s17 = *[ram]unique[0x42b0:4]
r5 = unique[0xfdc0:4]
s15 = *[ram]unique[0x4230:4]
r3 = *[ram]unique[0x11420:4]
s18 = CALLOTHER 0xc4, s15, unique[0x31a0:1]
r3 = *[ram]unique[0x11420:4]
s1 = s17
s0 = s18
call [pc]
r0 = r5
NG = tmpNG
s16 = s0
call ram[0x8022220:4]
r3 = zext(unique[0x12120:1])
if (unique[0x11bd0:1]) goto ram[0x802a34c:4]
s0 = *[ram]unique[0x42b0:4]
r3 = ram[0x802a3dc:4]
s0 = s16 f* s0
r3 = r3 + unique[0x4020:4]
*[ram]unique[0x41f0:4] = register[0x344:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
r3 = zext(unique[0x12120:1])
NG = tmpNG
if (unique[0xf740:1]) goto ram[0x802a332:4]
r2 = ram[0x802a3e0:4]
r0 = ram[0x802a3e4:4]
tmpZR = r1 == 0x0
NG = tmpNG
s0 = s18
call ram[0x801ae10:4]
r3 = sext(unique[0x12560:2])
s4 = *[ram]unique[0x4230:4]
s2 = r3
s1 = s0
s3 = s16
s0 = *[ram]unique[0x42b0:4]
s2 = CALLOTHER 0xc4, s2, unique[0x31a0:1]
call ram[0x80149a0:4]
s16 = s0
goto ram[0x802a332:4]
call ram[0x8015190:4]
r0 = *[ram]unique[0x11420:4]
s17 = s0
r5 = unique[0xfdc0:4]
goto ram[0x802a30a:4]
r5 = unique[0xfdc0:4]
r0 = r5
NG = tmpNG
call ram[0x8022220:4]
r3 = zext(unique[0x12120:1])
if (unique[0x11bd0:1]) goto ram[0x802a3b2:4]
s17 = *[ram]unique[0x42b0:4]
r0 = *[ram]unique[0x11420:4]
goto ram[0x802a30a:4]
s17 = *[ram]unique[0x4230:4]
goto ram[0x802a3ae:4]
r1 = ram[0x802a3e8:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
s0 = *[ram]unique[0x42b0:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc

r0 = zext(unique[0x11eb0:1])
NG = tmpNG
NG = tmpNG
NG = tmpNG
if (unique[0xf780:1]) goto ram[0x802a3f0:4]
OV = tmpOV
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
*[ram]unique[0x114b0:4] = register[0x3c:4]
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr + 0x4
mult_addr = mult_addr + 0x8
r6 = r0
sp = sp - unique[0xfdd0:4]
NG = tmpNG
r7 = r1
call ram[0x80343b0:4]
r3 = ram[0x802a4e8:4]
r4 = ram[0x802a4ec:4]
r8 = *[ram]unique[0x112a0:4]
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x802a4c8:4]
call ram[0x8015190:4]
r5 = s0
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x802a4b4:4]
r10 = ram[0x802a50c:4]
r9 = *[ram]unique[0x112a0:4]
tmpZR = r0 == 0x0
call ram[0x80322d0:4]
r3 = *[ram]unique[0x112a0:4]
tmpZR = r2 == 0x0
r9 = r9 + r2
*[ram]unique[0x41f0:4] = register[0x300:4]
r2 = r2 + r3
s16 = *[ram]unique[0x41f0:4]
s15 = r5
s16 = s15 f+ s16
tmpZR = r3 == 0x0
*[ram]unique[0x4230:4] = register[0x340:4]
r3 = s16
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x802a4dc:4]
s0 = s16
r1 = r7
r0 = r6
call ram[0x802a2e0:4]
r3 = ram[0x802a4f0:4]
s15 = *[ram]unique[0x42b0:4]
s13 = *[ram]unique[0x4230:4]
s14 = *[ram]unique[0x4230:4]
s16 = s16 f* s13
s13 = r8
s15 = s13 f* s15
s14 = CALLOTHER 0xc4, s14, unique[0x31a0:1]
s13 = s16 f/ s15
s0 = s13 f* s0
s15 = s0 f/ s14
r3 = s15
OV = tmpOV
if (unique[0xf6a0:1]) goto ram[0x802a4e0:4]
*[ram]unique[0x4230:4] = register[0x33c:4]
*[ram]unique[0x114b0:4] = register[0x34:4]
NG = tmpNG
call ram[0x8034390:4]
s0 = *[ram]unique[0x4230:4]
s1 = *[ram]unique[0x4230:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
r1 = ram[0x802a4f8:4]
tmpZR = r0 == 0x0
call ram[0x8015240:4]
r3 = ram[0x802a4fc:4]
*[ram]unique[0x114b0:4] = register[0x2c:4]
NG = tmpNG
*[ram]unique[0x114b0:4] = register[0x28:4]
goto ram[0x802a49c:4]
r1 = ram[0x802a500:4]
tmpZR = r0 == 0x0
call ram[0x8015f20:4]
r3 = ram[0x802a4fc:4]
*[ram]unique[0x114b0:4] = register[0x2c:4]
NG = tmpNG
*[ram]unique[0x114b0:4] = register[0x28:4]
goto ram[0x802a49c:4]
r1 = ram[0x802a504:4]
goto ram[0x802a4b6:4]
r1 = ram[0x802a508:4]
tmpZR = r0 == 0x0
goto ram[0x802a4ce:4]
r4 = zext(unique[0x11eb0:1])
NG = tmpNG
NG = tmpNG
r0 = zext(unique[0x11eb0:1])
r0 = zext(unique[0x11eb0:1])
NG = tmpNG
r3 = zext(unique[0x123f0:2])
NG = tmpNG
NG = tmpNG
NG = tmpNG
OV = tmpOV
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
NG = tmpNG
sp = mult_addr
mult_addr = mult_addr + 0x8
sp = sp - unique[0xfdd0:4]
r5 = r0
r4 = r1
call ram[0x8022900:4]
r3 = ram[0x802a5ac:4]
r0 = *[ram]unique[0x11420:4]
tmpZR = r0 == 0x0
s16 = s0
call ram[0x80322d0:4]
if (unique[0x11bd0:1]) goto ram[0x802a542:4]
s1 = *[ram]unique[0x42b0:4]
s0 = *[ram]unique[0x42b0:4]
sp = sp + unique[0xfdd0:4]
mult_addr = mult_addr + 0x8
return pc
s11 = r4
s0 = s16 f+ s0
s16 = *[ram]unique[0x42b0:4]
s13 = *[ram]unique[0x42b0:4]
s12 = *[ram]unique[0x42b0:4]
r3 = ram[0x802a5c4:4]
s15 = *[ram]unique[0x42b0:4]
s14 = *[ram]unique[0x4230:4]
r3 = ram[0x802a5c8:4]
s10 = CALLOTHER 0xc4, s11, unique[0x31a0:1]
s0 = s0 f* s16
s14 = CALLOTHER 0xc6, s14, 0x20, unique[0x3370:1]
s11 = s0 f/ s13
r0 = r5
r1 = r4
s13 = s10 f/ s12
s12 = s11 f/ s13
s13 = *[ram]unique[0x41f0:4]
s16 = s12 f/ s14
s15 = s16 f* s15
s1 = s15 f/ s13
s0 = s1
*[ram]unique[0x4230:4] = register[0x304:4]
