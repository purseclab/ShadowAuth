mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r0 = ram[0x8004a64:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0xf00000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = r0 | unique[0xfed0:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r1 = ram[0x8004a64:4]

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

r0 = ram[0x8004a54:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x1
shift_carry = CY
r0 = r0 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r1 = ram[0x8004a54:4]

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = ram[0x8004a54:4]

tmpCY = carry(r1, 0x8)
tmpOV = scarry(r1, 0x8)
r1 = r1 + 0x8
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

r0 = ram[0x8004a54:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

r1 = ram[0x8004a68:4]

r0 = r0 & r1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = ram[0x8004a54:4]

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

r0 = ram[0x8004a6c:4]

tmpCY = carry(r1, 0x4)
tmpOV = scarry(r1, 0x4)
r1 = r1 + 0x4
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

tmpCY = 0x4 <= r1
tmpOV = sborrow(r1, 0x4)
r0 = r1 - 0x4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x40000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
unique[0x11a60:4] = ~unique[0xfed0:4]
r0 = r0 & unique[0x11a60:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

tmpCY = 0x4 <= r1
tmpOV = sborrow(r1, 0x4)
r1 = r1 - 0x4
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = ram[0x8004a54:4]

tmpCY = carry(r1, 0xc)
tmpOV = scarry(r1, 0xc)
r1 = r1 + 0xc
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

lr = 0x8004998 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8004870:4]

unique[0xfe90:4] = 0x8000000
unique[0xfeb0:4] = unique[0xfe90:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfeb0:4], 0x0
r0 = unique[0xfe90:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r1 = ram[0x8004a64:4]

tmpCY = 0x80 <= r1
tmpOV = sborrow(r1, 0x80)
r1 = r1 - 0x80
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = 0x0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = 0x2
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = 0x2
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r5 = ram[0x8004a54:4]

tmpCY = carry(r5, 0x8)
tmpOV = scarry(r5, 0x8)
r5 = r5 + 0x8
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r5 + 0x0
r5 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0xc
shift_carry = CY
r0 = r5 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x80049c6:4]

tmpCY = 0x4 <= r0
tmpOV = sborrow(r0, 0x4)
unique[0x11d20:4] = r0 - 0x4
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x80049ce:4]

tmpCY = 0x8 <= r0
tmpOV = sborrow(r0, 0x8)
unique[0x11d20:4] = r0 - 0x8
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8004a2e:4]

goto ram[0x80049d6:4]

r5 = ram[0x8004a70:4]

r6 = ram[0x8004a74:4]

unique[0x11420:4] = r6 + 0x0
*[ram]unique[0x11420:4] = register[0x34:4]

goto ram[0x8004a36:4]

r5 = ram[0x8004a78:4]

r6 = ram[0x8004a74:4]

unique[0x11420:4] = r6 + 0x0
*[ram]unique[0x11420:4] = register[0x34:4]

goto ram[0x8004a36:4]

r5 = ram[0x8004a54:4]

tmpCY = carry(r5, 0x4)
tmpOV = scarry(r5, 0x4)
r5 = r5 + 0x4
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r5 + 0x0
r5 = *[ram]unique[0x11420:4]

unique[0xff10:4] = 0x16
unique[0xff30:4] = 0x0
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r4 = r5 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r4 = r4 >> unique[0x19d40:4]

r5 = ram[0x8004a54:4]

tmpCY = carry(r5, 0x4)
tmpOV = scarry(r5, 0x4)
r5 = r5 + 0x4
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r5 + 0x0
r5 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x3f
shift_carry = CY
r1 = r5 & unique[0xfe50:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x11bf0:1] = r4 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8004a02:4]

r5 = ram[0x8004a78:4]

unique[0x19d80:8] = zext(r5)
unique[0x19d90:8] = zext(r1)
unique[0x19db0:8] = unique[0x19d80:8] / unique[0x19d90:8]
r5 = SUBPIECE unique[0x19db0:8], 0x0

r6 = ram[0x8004a54:4]

tmpCY = carry(r6, 0x4)
tmpOV = scarry(r6, 0x4)
r6 = r6 + 0x4
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r6 + 0x0
r6 = *[ram]unique[0x11420:4]

unique[0xff10:4] = 0x6
unique[0xff30:4] = 0x8
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r6 = r6 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r6 = r6 >> unique[0x19d40:4]

r2 = r5 * r6

goto ram[0x8004a16:4]

r5 = ram[0x8004a70:4]

unique[0x19d80:8] = zext(r5)
unique[0x19d90:8] = zext(r1)
unique[0x19db0:8] = unique[0x19d80:8] / unique[0x19d90:8]
r5 = SUBPIECE unique[0x19db0:8], 0x0

r6 = ram[0x8004a54:4]

tmpCY = carry(r6, 0x4)
tmpOV = scarry(r6, 0x4)
r6 = r6 + 0x4
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r6 + 0x0
r6 = *[ram]unique[0x11420:4]

unique[0xff10:4] = 0x6
unique[0xff30:4] = 0x8
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r6 = r6 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r6 = r6 >> unique[0x19d40:4]

r2 = r5 * r6

r5 = ram[0x8004a54:4]

