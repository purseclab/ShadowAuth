mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r5 = r0

r4 = r1

unique[0x11440:4] = r4 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r0 = zext(unique[0x11ef0:2])

unique[0x11bd0:1] = r0 != 0x0
if (unique[0x11bd0:1]) goto ram[0x80044f4:4]

unique[0x11440:4] = r4 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x4
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x2
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x80044ea | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800449a:4]

unique[0x11440:4] = r4 + 0x6
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x80044f2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8004488:4]

goto ram[0x8004540:4]

unique[0x11440:4] = r4 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r0 = zext(unique[0x11ef0:2])

tmpCY = 0x4 <= r0
tmpOV = sborrow(r0, 0x4)
unique[0x11d20:4] = r0 - 0x4
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8004510:4]

unique[0x11440:4] = r4 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x4
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x2
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x8004506 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800442e:4]

unique[0x11440:4] = r4 + 0x6
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x800450e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8004414:4]

goto ram[0x8004540:4]

unique[0x11440:4] = r4 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r0 = zext(unique[0x11ef0:2])

tmpCY = 0x8 <= r0
tmpOV = sborrow(r0, 0x8)
unique[0x11d20:4] = r0 - 0x8
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x800452c:4]

unique[0x11440:4] = r4 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x4
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x2
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x8004522 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80043cc:4]

unique[0x11440:4] = r4 + 0x6
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x800452a | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80043ba:4]

goto ram[0x8004540:4]

unique[0x11440:4] = r4 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x4
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x2
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x8004538 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800436a:4]

unique[0x11440:4] = r4 + 0x6
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x8004540 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8004350:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x0
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x2
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x4
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x6
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x8
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

mult_addr = sp - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x40:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x3c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
sp = mult_addr + 0x4

r5 = r0

r4 = r1

r6 = 0x0
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0
ZR = tmpZR
NG = tmpNG

r7 = 0x1
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r4 + 0x2
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r0 = zext(unique[0x11ef0:2])

unique[0x11bd0:1] = r0 != 0x0
if (unique[0x11bd0:1]) goto ram[0x8004568:4]

r6 = 0x2
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x800456a:4]

r6 = 0x0
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r4 + 0x4
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r0 = zext(unique[0x11ef0:2])

tmpCY = 0x1 <= r0
tmpOV = sborrow(r0, 0x1)
unique[0x11d20:4] = r0 - 0x1
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8004574:4]

r7 = 0x2
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8004576:4]

r7 = 0x1
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r4 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r0 = zext(unique[0x11ef0:2])

unique[0x11bd0:1] = r0 != 0x0
if (unique[0x11bd0:1]) goto ram[0x80045a4:4]

unique[0x11440:4] = r4 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x4
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x2
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x8004586 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800449a:4]

unique[0x11440:4] = r4 + 0x6
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x800458e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8004488:4]

unique[0x11440:4] = r4 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

r2 = r7

r1 = r6

r0 = r5

lr = 0x800459a | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800442e:4]

unique[0x11440:4] = r4 + 0x6
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x80045a2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8004414:4]

goto ram[0x80045cc:4]

unique[0x11440:4] = r4 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x4
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r4 + 0x2
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x80045b0 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800442e:4]

unique[0x11440:4] = r4 + 0x6
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x80045b8 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8004414:4]

unique[0x11440:4] = r4 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

r2 = r7

r1 = r6

r0 = r5

lr = 0x80045c4 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800449a:4]

unique[0x11440:4] = r4 + 0x6
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r0 = r5

lr = 0x80045cc | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8004488:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r7 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r8 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r1 = r0

unique[0x11420:4] = r1 + 0x34
r0 = *[ram]unique[0x11420:4]

