mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r0 = ram[0x80016ec:4]

unique[0x11440:4] = r0 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r0 = zext(unique[0x11ef0:2])

r1 = ram[0x80016f0:4]

unique[0x11460:4] = r1 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r1 = zext(unique[0x11eb0:1])

tmpCY = r1 <= r0
tmpOV = sborrow(r0, r1)
unique[0x11d80:4] = r0 - r1
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x80016e0:4]

r0 = 0x8
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x80016d2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001592:4]

r0 = 0x8
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x80016d8 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001592:4]

r0 = ram[0x80016f4:4]

unique[0x11460:4] = r0 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r0 = zext(unique[0x11eb0:1])

r1 = ram[0x80016ec:4]

unique[0x11440:4] = r1 + 0x0
unique[0x176d0:2] = SUBPIECE r0, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r0 = r0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

tmpCY = carry(r0, 0x0)
tmpOV = scarry(r0, 0x0)
r0 = r0 + 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

r1 = r1 & r0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x126c0:4] = 0x10 - 0x1
unique[0x126d0:4] = r0 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0x10 == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0x10 != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r0 = r0 << 0x10
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

r2 = r2 & r0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x126c0:4] = 0x1 - 0x1
unique[0x126d0:4] = r1 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0x1 == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0x1 != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r0 = r1 << 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r5 + 0x74
r2 = *[ram]unique[0x11420:4]

unique[0x127a0:1] = 0x20 - 0x1
unique[0x127b0:4] = r0 >> unique[0x127a0:1]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = 0x20 == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = 0x20 != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
r0 = r0 >> 0x20
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r5 + 0x74
r3 = *[ram]unique[0x11420:4]

unique[0x127a0:1] = 0x20 - 0x1
unique[0x127b0:4] = r0 >> unique[0x127a0:1]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = 0x20 == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = 0x20 != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
r0 = r0 >> 0x20
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r0 = ram[0x80017b4:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x3e8
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r2 = unique[0xfed0:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x19d80:8] = zext(r0)
unique[0x19d90:8] = zext(r2)
unique[0x19db0:8] = unique[0x19d80:8] / unique[0x19d90:8]
r1 = SUBPIECE unique[0x19db0:8], 0x0

tmpCY = 0x1 <= r1
tmpOV = sborrow(r1, 0x1)
r0 = r1 - 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xfe90:4] = 0x1000000
unique[0xfeb0:4] = unique[0xfe90:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfeb0:4], 0x0
tmpCY = unique[0xfe90:4] <= r0
tmpOV = sborrow(r0, unique[0xfe90:4])
unique[0x11d40:4] = r0 - unique[0xfe90:4]
tmpNG = unique[0x11d40:4] s< 0x0
tmpZR = unique[0x11d40:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf700:1] = CY == 0x0
if (unique[0xf700:1]) goto ram[0x8001710:4]

goto ram[0x8001748:4]

