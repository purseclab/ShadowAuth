mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r2 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = 0x0
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r2 + 0x4
r0 = *[ram]unique[0x11420:4]

r4 = ram[0x80027b0:4]

r0 = r0 & r4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11460:4] = r1 + 0x4
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r5 = zext(unique[0x11eb0:1])

unique[0x11420:4] = r1 + 0x0
r4 = *[ram]unique[0x11420:4]

unique[0xff50:4] = 0x20 - 0x8
unique[0xff60:4] = r5 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r5 << 0x8
r4 = r4 | unique[0xffb0:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0

r0 = r0 | r4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r2 + 0x4
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x11420:4] = r2 + 0x8
r0 = *[ram]unique[0x11420:4]

r4 = ram[0x80027b4:4]

r0 = r0 & r4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x113e0:4] = r1 + 0xc
r5 = *[ram]unique[0x113e0:4]
unique[0x12270:4] = unique[0x113e0:4] + 0x4
r4 = *[ram]unique[0x12270:4]

r4 = r4 | r5
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r1 + 0x8
r5 = *[ram]unique[0x11420:4]

r4 = r4 | r5
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11460:4] = r1 + 0x5
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r5 = zext(unique[0x11eb0:1])

unique[0xff50:4] = 0x20 - 0x1
unique[0xff60:4] = r5 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r5 << 0x1
r4 = r4 | unique[0xffb0:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0

r0 = r0 | r4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r2 + 0x8
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x11420:4] = r2 + 0x2c
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0xf00000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
unique[0x11a60:4] = ~unique[0xfed0:4]
r0 = r0 & unique[0x11a60:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11460:4] = r1 + 0x14
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r4 = zext(unique[0x11eb0:1])

tmpCY = 0x1 <= r4
tmpOV = sborrow(r4, 0x1)
r4 = r4 - 0x1
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x1a070:1] = SUBPIECE r4, 0x0
r4 = zext(unique[0x1a070:1])

r3 = r3 | r4
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xff50:4] = 0x20 - 0x14
unique[0xff60:4] = r3 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r3 << 0x14
r0 = r0 | unique[0xffb0:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11420:4] = r2 + 0x2c
*[ram]unique[0x11420:4] = register[0x20:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11460:4] = r0 + 0x4
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

unique[0x11460:4] = r0 + 0x5
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

unique[0x11420:4] = r0 + 0x8
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0xc
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x10
*[ram]unique[0x11420:4] = register[0x24:4]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11460:4] = r0 + 0x14
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x80027b8:4]

unique[0x11420:4] = r2 + 0x0
r1 = *[ram]unique[0x11420:4]

r2 = ram[0x80027bc:4]

r1 = r1 & r2
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x113e0:4] = r0 + 0x0
r2 = *[ram]unique[0x113e0:4]
unique[0x12270:4] = unique[0x113e0:4] + 0x4
r3 = *[ram]unique[0x12270:4]

r2 = r2 | r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x8
r3 = *[ram]unique[0x11420:4]

r2 = r2 | r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0xc
r3 = *[ram]unique[0x11420:4]

r2 = r2 | r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r1 | r2
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x80027c0:4]

unique[0x112a0:4] = r2 + 0x304
*[ram]unique[0x112a0:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x4
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x8
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0xc
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x800245a:4]

unique[0x11420:4] = r0 + 0x8
r2 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x1
shift_carry = CY
r2 = r2 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11420:4] = r0 + 0x8
*[ram]unique[0x11420:4] = register[0x28:4]

goto ram[0x8002462:4]

unique[0x11420:4] = r0 + 0x8
r2 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x1
shift_carry = CY
unique[0x11a60:4] = ~unique[0xfe50:4]
r2 = r2 & unique[0x11a60:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11420:4] = r0 + 0x8
*[ram]unique[0x11420:4] = register[0x28:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r2 = r1

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

