mult_addr = sp - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x40:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x3c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
sp = mult_addr + 0x4

r4 = r0

r5 = r1

r6 = r2

r7 = r3

tmpCY = 0x60 <= r5
tmpOV = sborrow(r5, 0x60)
unique[0x11d20:4] = r5 - 0x60
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8004746:4]

r3 = r7

r2 = 0x1
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r6

r0 = r4

lr = 0x8004744 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800442e:4]

goto ram[0x8004752:4]

r3 = r7

r2 = 0x1
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r6

r0 = r4

lr = 0x8004752 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800449a:4]

r1 = r5

r0 = r4

lr = 0x800475a | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80046fe:4]

unique[0x11440:4] = r4 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r0 = zext(unique[0x11ef0:2])

unique[0xfe50:4] = 0x7
shift_carry = CY
r0 = r0 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11440:4] = r4 + 0x8
unique[0x176d0:2] = SUBPIECE r0, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r7 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r8 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r4 = r1

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

unique[0x1a070:1] = SUBPIECE r1, 0x0
r1 = zext(unique[0x1a070:1])

r5 = zext(0xffff)
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

unique[0xff50:4] = 0x20 - 0x8
unique[0xff60:4] = r3 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r3 << 0x8
r5 = r5 & unique[0xffb0:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r5 = r5 | r2
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

r5 = r5 | r4
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r1 | r5
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x8
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x40:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x3c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
sp = mult_addr + 0x4

r5 = r0

r6 = r1

r7 = r2

r8 = r3

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = r8

r2 = r7

r1 = r6

r0 = r5

lr = 0x800479c | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8004766:4]

unique[0x11440:4] = r5 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r4 = zext(unique[0x11ef0:2])

r0 = zext(0xfff8)
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r4 = r4 & r0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xfe50:4] = 0x7
shift_carry = CY
r4 = r4 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0

r0 = zext(0xff8f)
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r4 = r4 & r0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xfe50:4] = 0x70
shift_carry = CY
r4 = r4 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0

unique[0x11440:4] = r5 + 0x8
unique[0x176d0:2] = SUBPIECE r4, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r7 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r8 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x3c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r4 = r0

r5 = r1

r6 = r2

r7 = r3

