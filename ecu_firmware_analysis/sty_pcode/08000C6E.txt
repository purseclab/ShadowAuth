mult_addr = sp - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x40:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x3c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x2c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x28:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x24:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x20:4]
mult_addr = mult_addr - 0x4
sp = mult_addr + 0x4

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x114b0:4] = sp + 0x8
*[ram]unique[0x114b0:4] = register[0x20:4]

unique[0x114b0:4] = sp + 0xc
*[ram]unique[0x114b0:4] = register[0x20:4]

unique[0xfdc0:4] = sp + 0x8
r2 = unique[0xfdc0:4]

r1 = 0x8f
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000c82 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000c12:4]

r8 = r0

unique[0xfe50:4] = 0x0
shift_carry = CY
tmpCY = unique[0xfe50:4] <= r8
tmpOV = sborrow(r8, unique[0xfe50:4])
unique[0x11d40:4] = r8 - unique[0xfe50:4]
tmpNG = unique[0x11d40:4] s< 0x0
tmpZR = unique[0x11d40:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8000c98:4]

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000c90 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80009f0:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xfdd0:4] = 0x10
sp = sp + unique[0xfdd0:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r7 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r8 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r7 = 0x0
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
ZR = tmpZR
NG = tmpNG

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8000ccc:4]

r5 = 0x0
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8000cc4:4]

unique[0xfdc0:4] = sp + 0x8
r0 = unique[0xfdc0:4]

unique[0x120d0:4] = r4 << 0x2
unique[0x120f0:4] = r0 + unique[0x120d0:4]
r0 = *[ram]unique[0x120f0:4]

unique[0x12880:4] = r5 & 0xff
unique[0x127a0:4] = unique[0x12880:4] - 0x1
unique[0x127b0:4] = r0 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12880:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12880:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
unique[0x12890:4] = r5 & 0xff
r0 = r0 >> unique[0x12890:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0xfe50:4] = 0x1
shift_carry = CY
r0 = r0 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000cc0:4]

r1 = 0x3
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xff50:4] = 0x20 - 0x4
unique[0xff60:4] = r4 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r4 << 0x4
unique[0x116d0:4] = unique[0xffb0:4]
tmpCY = carry(r1, unique[0x116d0:4])
tmpOV = scarry(r1, unique[0x116d0:4])
r1 = r1 + unique[0x116d0:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

r1 = r1 + r5

unique[0x1a070:1] = SUBPIECE r1, 0x0
r0 = zext(unique[0x1a070:1])

lr = 0x8000cbe | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80009f0:4]

r7 = 0x1
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
ZR = tmpZR
NG = tmpNG

tmpCY = carry(r5, 0x1)
tmpOV = scarry(r5, 0x1)
r0 = r5 + 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x1a070:1] = SUBPIECE r0, 0x0
r5 = zext(unique[0x1a070:1])

tmpCY = 0x10 <= r5
tmpOV = sborrow(r5, 0x10)
unique[0x11d20:4] = r5 - 0x10
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf820:1] = NG != OV
if (unique[0xf820:1]) goto ram[0x8000ca2:4]

tmpCY = carry(r4, 0x1)
tmpOV = scarry(r4, 0x1)
r0 = r4 + 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x1a070:1] = SUBPIECE r0, 0x0
r4 = zext(unique[0x1a070:1])

tmpCY = 0x1 <= r4
tmpOV = sborrow(r4, 0x1)
unique[0x11d20:4] = r4 - 0x1
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf820:1] = NG != OV
if (unique[0xf820:1]) goto ram[0x8000c9e:4]

unique[0x11bf0:1] = r7 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000cd6:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8000c92:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

unique[0x114b0:4] = sp + 0x4
*[ram]unique[0x114b0:4] = register[0x20:4]

r2 = sp

r1 = 0x40
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000ce6 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000c12:4]

r6 = r0

unique[0x11bf0:1] = r6 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000cf4:4]

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000cf0 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80009f0:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8000c92:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8000c92:4]

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x3c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x2c:4]
sp = mult_addr

r5 = r0

r6 = r1

r4 = r2

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

unique[0x1a070:1] = SUBPIECE r4, 0x0
r0 = zext(unique[0x1a070:1])

unique[0x112a0:4] = sp + 0x0
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

unique[0x117b0:4] = 0x8 - 0x1
unique[0x117c0:4] = r4 s>> unique[0x117b0:4]
unique[0x117e0:4] = unique[0x117c0:4] & 0x1
unique[0x117f0:1] = 0x8 == 0x0
unique[0x11800:1] = unique[0x117f0:1] && CY
unique[0x11810:1] = 0x8 != 0x0
unique[0x11820:1] = unique[0x117e0:4] != 0x0
unique[0x11830:1] = unique[0x11810:1] && unique[0x11820:1]
tmpCY = unique[0x11800:1] || unique[0x11830:1]
r0 = r4 s>> 0x8
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x1
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r3 = sp

r2 = 0x2
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r6

r0 = r5

lr = 0x8000d1c | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000b9c:4]

mult_addr = sp
r3 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r7 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

unique[0x11bd0:1] = r0 != 0x0
if (unique[0x11bd0:1]) goto ram[0x8000d2e:4]

r1 = ram[0x8000f38:4]

unique[0x11420:4] = r1 + 0x0
r1 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x1000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r1 = r1 | unique[0xfed0:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

r2 = ram[0x8000f38:4]

unique[0x11420:4] = r2 + 0x0
*[ram]unique[0x11420:4] = register[0x24:4]

goto ram[0x8000d3a:4]

r1 = ram[0x8000f38:4]

unique[0x11420:4] = r1 + 0x0
r1 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x1000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
unique[0x11a60:4] = ~unique[0xfed0:4]
r1 = r1 & unique[0x11a60:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

r2 = ram[0x8000f38:4]

unique[0x11420:4] = r2 + 0x0
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
sp = mult_addr

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d44 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000d1e:4]

mult_addr = sp
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x2c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x28:4]
sp = mult_addr

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d4e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000d1e:4]

r0 = 0x5
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d54 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80017a2:4]

r2 = 0x0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = 0x51
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d5e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000cf8:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

unique[0x114b0:4] = sp + 0x4
*[ram]unique[0x114b0:4] = register[0x20:4]

r2 = sp

r1 = 0x51
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d6e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000c12:4]

r6 = r0

unique[0x11bf0:1] = r6 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000da6:4]

lr = 0x8000d76 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000d3c:4]

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG


goto ram[0x8000d9e:4]

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d84 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80012b8:4]

unique[0xfed0:4] = 0x15e
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

lr = 0x8000d8c | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80017a2:4]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d94 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80012b8:4]

unique[0xfed0:4] = 0x15e
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

lr = 0x8000d9c | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80017a2:4]

tmpCY = carry(r4, 0x1)
tmpOV = scarry(r4, 0x1)
r4 = r4 + 0x1
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

tmpCY = 0x2 <= r4
tmpOV = sborrow(r4, 0x2)
unique[0x11d20:4] = r4 - 0x2
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf820:1] = NG != OV
if (unique[0xf820:1]) goto ram[0x8000d7c:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

mult_addr = sp
r2 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r3 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8000df6:4]

unique[0x121b0:4] = r4 << 0x2
unique[0x121d0:4] = sp + unique[0x121b0:4]
unique[0x121f0:1] = *[ram]unique[0x121d0:4]
r0 = zext(unique[0x121f0:1])

unique[0xfe50:4] = 0x4
shift_carry = CY
r0 = r0 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000df2:4]

unique[0xfe50:4] = 0x25
shift_carry = CY
tmpCY = carry(r4, unique[0xfe50:4])
tmpOV = scarry(r4, unique[0xfe50:4])
r1 = r4 + unique[0xfe50:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x1a070:1] = SUBPIECE r1, 0x0
r0 = zext(unique[0x1a070:1])

lr = 0x8000dbe | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80009f0:4]

lr = 0x8000dc2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000d3c:4]

r5 = 0x0
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

