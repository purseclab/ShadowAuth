r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = ram[0x80036b0:4]

unique[0x11460:4] = r0 + 0x6
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r2 = zext(unique[0x11eb0:1])

tmpCY = 0x0 <= r2
tmpOV = sborrow(r2, 0x0)
unique[0x11d20:4] = r2 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8003644:4]

r2 = r1

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x0
r3 = *[ram]unique[0x11420:4]

unique[0x11a40:4] = ~r3
r2 = r2 & unique[0x11a40:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = r1

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

tmpCY = carry(r1, 0x4)
tmpOV = scarry(r1, 0x4)
r2 = r1 + 0x4
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x0
r3 = *[ram]unique[0x11420:4]

unique[0x11a40:4] = ~r3
r2 = r2 & unique[0x11a40:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

tmpCY = carry(r1, 0x4)
tmpOV = scarry(r1, 0x4)
r3 = r1 + 0x4
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

unique[0x11460:4] = r0 + 0x4
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r2 = zext(unique[0x11eb0:1])

r1 = r1 + r2

unique[0x11420:4] = r1 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x0
r3 = *[ram]unique[0x11420:4]

r2 = r2 | r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

r2 = ram[0x80036b0:4]

tmpCY = carry(r2, 0x8)
tmpOV = scarry(r2, 0x8)
r2 = r2 + 0x8
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x0
r3 = *[ram]unique[0x11420:4]

unique[0x11a40:4] = ~r3
r2 = r2 & unique[0x11a40:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x80036b0:4]

tmpCY = carry(r3, 0x8)
tmpOV = scarry(r3, 0x8)
r3 = r3 + 0x8
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

tmpCY = carry(r3, 0x4)
tmpOV = scarry(r3, 0x4)
r2 = r3 + 0x4
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x0
r3 = *[ram]unique[0x11420:4]

unique[0x11a40:4] = ~r3
r2 = r2 & unique[0x11a40:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x80036b0:4]

tmpCY = carry(r3, 0xc)
tmpOV = scarry(r3, 0xc)
r3 = r3 + 0xc
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

unique[0x11460:4] = r0 + 0x5
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r2 = zext(unique[0x11eb0:1])

tmpCY = 0x10 <= r2
tmpOV = sborrow(r2, 0x10)
unique[0x11d20:4] = r2 - 0x10
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8003634:4]

tmpCY = 0x4 <= r3
tmpOV = sborrow(r3, 0x4)
r2 = r3 - 0x4
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x0
r3 = *[ram]unique[0x11420:4]

r2 = r2 | r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x80036b0:4]

tmpCY = carry(r3, 0x8)
tmpOV = scarry(r3, 0x8)
r3 = r3 + 0x8
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

tmpCY = carry(r3, 0x4)
tmpOV = scarry(r3, 0x4)
r2 = r3 + 0x4
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x0
r3 = *[ram]unique[0x11420:4]

r2 = r2 | r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x80036b0:4]

tmpCY = carry(r3, 0xc)
tmpOV = scarry(r3, 0xc)
r3 = r3 + 0xc
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

goto ram[0x8003650:4]

r1 = ram[0x80036b0:4]

unique[0x11460:4] = r0 + 0x5
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r2 = zext(unique[0x11eb0:1])

r1 = r1 + r2

unique[0x11420:4] = r1 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x0
r3 = *[ram]unique[0x11420:4]

r2 = r2 | r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

goto ram[0x8003650:4]

unique[0x11460:4] = r0 + 0x4
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r2 = zext(unique[0x11eb0:1])

r1 = r1 + r2

unique[0x11420:4] = r1 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x0
r3 = *[ram]unique[0x11420:4]

unique[0x11a40:4] = ~r3
r2 = r2 & unique[0x11a40:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11460:4] = r0 + 0x4
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

r1 = 0xc
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11460:4] = r0 + 0x5
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11460:4] = r0 + 0x6
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = ram[0x80036b0:4]

tmpCY = carry(r1, 0x10)
tmpOV = scarry(r1, 0x10)
r1 = r1 + 0x10
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
r1 = *[ram]unique[0x11420:4]

r1 = r1 | r0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x80036b0:4]

tmpCY = carry(r2, 0x10)
tmpOV = scarry(r2, 0x10)
r2 = r2 + 0x10
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x80036b0:4]

tmpCY = carry(r2, 0x14)
tmpOV = scarry(r2, 0x14)
r2 = r2 + 0x14
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

r2 = r2 & r1
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11bf0:1] = r2 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8003684:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8003686:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = ram[0x80036b0:4]

tmpCY = carry(r1, 0x14)
tmpOV = scarry(r1, 0x14)
r1 = r1 + 0x14
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x80036b0:4]

tmpCY = carry(r2, 0x14)
tmpOV = scarry(r2, 0x14)
r2 = r2 + 0x14
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

r2 = r2 & r1
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11bf0:1] = r2 == 0x0
if (unique[0x11bf0:1]) goto ram[0x80036a2:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x80036a4:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = ram[0x80036b0:4]

tmpCY = carry(r1, 0x14)
tmpOV = scarry(r1, 0x14)
r1 = r1 + 0x14
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r0 = r0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

tmpCY = 0x0 <= r4
tmpOV = sborrow(r4, 0x0)
r4 = r4 - 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

r1 = r1 & r0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

