mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r5 = r0

r4 = r1

tmpCY = 0x0 <= r4
tmpOV = sborrow(r4, 0x0)
unique[0x11d20:4] = r4 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf800:1] = NG == OV
if (unique[0xf800:1]) goto ram[0x8000e20:4]

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xfe50:4] = 0x1
shift_carry = CY
r0 = r5 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000e32:4]

tmpCY = r4 == 0x0
tmpOV = sborrow(0x0, r4)
r0 = 0x0 - r4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x1a1b0:2] = SUBPIECE r0, 0x0
r2 = zext(unique[0x1a1b0:2])

r1 = 0x90
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e32 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000cf8:4]

unique[0xfe50:4] = 0x2
shift_carry = CY
r0 = r5 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000e42:4]

unique[0x1a1b0:2] = SUBPIECE r4, 0x0
r2 = zext(unique[0x1a1b0:2])

r1 = 0x90
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e42 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000cf8:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

unique[0x4db0:4] = 0x2 * 0x4
sp = sp - unique[0x4db0:4]
mult_addr = sp
*[ram]mult_addr = register[0x340:8]
mult_addr = mult_addr + 0x8

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e50 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80019bc:4]

s16 = s0

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e5a | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80019bc:4]

s17 = s0

unique[0x4280:4] = 0x8000e5e + 0x4
unique[0x4290:4] = unique[0x4280:4] & 0xfffffffc
unique[0x42b0:4] = unique[0x4290:4] + 0xdc
s0 = *[ram]unique[0x42b0:4]

s0 = s16 f* s0

CALLOTHER 0x1, 0xa, 0xb, 0x6, cr0, cr13, cr0

r0 = s0

unique[0x18230:2] = SUBPIECE r0, 0x0
r4 = sext(unique[0x18230:2])

r1 = r4

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e78 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000e14:4]

mult_addr = sp
unique[0x4ef0:4] = 0x2 * 0x4
sp = sp + unique[0x4ef0:4]
d8 = *[ram]mult_addr
mult_addr = mult_addr + 0x8

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r5 = r0

r4 = r1

tmpCY = 0x0 <= r4
tmpOV = sborrow(r4, 0x0)
unique[0x11d20:4] = r4 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf800:1] = NG == OV
if (unique[0xf800:1]) goto ram[0x8000e8a:4]

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xfe50:4] = 0x1
shift_carry = CY
r0 = r5 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000e9c:4]

tmpCY = r4 == 0x0
tmpOV = sborrow(0x0, r4)
r0 = 0x0 - r4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x1a1b0:2] = SUBPIECE r0, 0x0
r2 = zext(unique[0x1a1b0:2])

