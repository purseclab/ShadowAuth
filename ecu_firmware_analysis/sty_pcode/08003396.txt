r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x4
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x8
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0xc
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x10
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x14
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x18
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x1c
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x20
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x24
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x28
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x2c
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x30
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x34
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11420:4] = r0 + 0x38
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x80033c4:4]

unique[0x11420:4] = r0 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x1
shift_carry = CY
r2 = r2 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

goto ram[0x80033cc:4]

unique[0x11420:4] = r0 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x1
shift_carry = CY
unique[0x11a60:4] = ~unique[0xfe50:4]
r2 = r2 & unique[0x11a60:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x80033da:4]

unique[0x11420:4] = r0 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x8000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r2 = r2 | unique[0xfed0:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

goto ram[0x80033e2:4]

unique[0x11420:4] = r0 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x8000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
unique[0x11a60:4] = ~unique[0xfed0:4]
r2 = r2 & unique[0x11a60:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

