r2 = 0x0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

r3 = ram[0x8003fcc:4]

tmpCY = r3 <= r0
tmpOV = sborrow(r0, r3)
unique[0x11d80:4] = r0 - r3
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8003d4e:4]

r3 = ram[0x8003fe4:4]

tmpCY = r3 <= r0
tmpOV = sborrow(r0, r3)
unique[0x11d80:4] = r0 - r3
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8003d4e:4]

unique[0xfe90:4] = 0x40000000
unique[0xfeb0:4] = unique[0xfe90:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfeb0:4], 0x0
tmpCY = unique[0xfe90:4] <= r0
tmpOV = sborrow(r0, unique[0xfe90:4])
unique[0x11d40:4] = r0 - unique[0xfe90:4]
tmpNG = unique[0x11d40:4] s< 0x0
tmpZR = unique[0x11d40:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8003d4e:4]

r3 = ram[0x8003fd0:4]

tmpCY = r3 <= r0
tmpOV = sborrow(r0, r3)
unique[0x11d80:4] = r0 - r3
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8003d4e:4]

r3 = ram[0x8003fd4:4]

tmpCY = r3 <= r0
tmpOV = sborrow(r0, r3)
unique[0x11d80:4] = r0 - r3
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8003d4e:4]

r3 = ram[0x8003fd8:4]

tmpCY = r3 <= r0
tmpOV = sborrow(r0, r3)
unique[0x11d80:4] = r0 - r3
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8003d58:4]

r3 = zext(0xff8f)
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

r2 = r2 & r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r1 + 0x2
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

r2 = r2 | r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x8003fdc:4]

tmpCY = r3 <= r0
tmpOV = sborrow(r0, r3)
unique[0x11d80:4] = r0 - r3
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8003d6e:4]

r3 = ram[0x8003fe0:4]

tmpCY = r3 <= r0
tmpOV = sborrow(r0, r3)
unique[0x11d80:4] = r0 - r3
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8003d6e:4]

r3 = zext(0xfcff)
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

r2 = r2 & r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r1 + 0x8
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

r2 = r2 | r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x0
unique[0x176d0:2] = SUBPIECE r2, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11420:4] = r1 + 0x4
r3 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x2c
*[ram]unique[0x11420:4] = register[0x2c:4]

unique[0x11440:4] = r1 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r0 + 0x28
unique[0x176d0:2] = SUBPIECE r3, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

r3 = ram[0x8003fcc:4]

tmpCY = r3 <= r0
tmpOV = sborrow(r0, r3)
unique[0x11d80:4] = r0 - r3
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8003d84:4]

r3 = ram[0x8003fe4:4]

tmpCY = r3 <= r0
tmpOV = sborrow(r0, r3)
unique[0x11d80:4] = r0 - r3
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8003d88:4]

unique[0x11460:4] = r1 + 0xa
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r3 = zext(unique[0x11eb0:1])

unique[0x11440:4] = r0 + 0x30
unique[0x176d0:2] = SUBPIECE r3, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

r3 = 0x1
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x14
unique[0x176d0:2] = SUBPIECE r3, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0xfe80:4] = 0xffffffff
shift_carry = CY
r1 = unique[0xfe80:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x11420:4] = r0 + 0x4
*[ram]unique[0x11420:4] = register[0x24:4]

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x0
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x8
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x2
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11460:4] = r0 + 0xa
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11440:4] = r0 + 0x28
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x14
unique[0x176d0:2] = SUBPIECE r2, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r2 = r1

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r3 = zext(0xff8f)
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

r1 = r1 & r3
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r1 | r2
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x0
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11420:4] = r0 + 0x24
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11420:4] = r0 + 0x2c
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

unique[0x11420:4] = r1 + 0x24
r0 = *[ram]unique[0x11420:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

unique[0x11440:4] = r1 + 0x28
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r0 = zext(unique[0x11ef0:2])

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8003dd8:4]

unique[0x11440:4] = r0 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

unique[0xfe50:4] = 0x2
shift_carry = CY
r2 = r2 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11440:4] = r0 + 0x0
unique[0x176d0:2] = SUBPIECE r2, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

goto ram[0x8003de2:4]

unique[0x11440:4] = r0 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

r3 = zext(0xfffd)
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

r2 = r2 & r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x0
unique[0x176d0:2] = SUBPIECE r2, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8003df0:4]

unique[0x11440:4] = r0 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

unique[0xfe50:4] = 0x4
shift_carry = CY
r2 = r2 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11440:4] = r0 + 0x0
unique[0x176d0:2] = SUBPIECE r2, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

goto ram[0x8003dfa:4]

unique[0x11440:4] = r0 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

r3 = zext(0xfffb)
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

r2 = r2 & r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x0
unique[0x176d0:2] = SUBPIECE r2, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8003e08:4]

unique[0x11440:4] = r0 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

unique[0xfe50:4] = 0x80
shift_carry = CY
r2 = r2 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11440:4] = r0 + 0x0
unique[0x176d0:2] = SUBPIECE r2, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

goto ram[0x8003e12:4]

unique[0x11440:4] = r0 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

