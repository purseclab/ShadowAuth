mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x2c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x28:4]
sp = mult_addr

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x126c0:4] = 0xe - 0x1
unique[0x126d0:4] = r1 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0xe == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0xe != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r0 = r1 << 0xe
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

lr = 0x80017da | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80020d8:4]

r1 = 0x9
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x80017e2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003b5a:4]

r1 = 0xa
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x80017ea | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003b5a:4]

r1 = 0x7
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x80017f2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003b5a:4]

r1 = 0x8
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x80017fa | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003b5a:4]

unique[0xfed0:4] = 0x600
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x6
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x4
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0xc
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x5
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = sp

lr = 0x8001818 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80035c4:4]

mult_addr = sp
r2 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r3 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

CALLOTHER 0x21

unique[0xfed0:4] = 0x200
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

lr = 0x8001826 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003690:4]

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8001860:4]

r0 = ram[0x80018b0:4]

unique[0x11460:4] = r0 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r0 = zext(unique[0x11eb0:1])

unique[0x11bd0:1] = r0 != 0x0
if (unique[0x11bd0:1]) goto ram[0x8001840:4]

unique[0xfe90:4] = 0x40000000
unique[0xfeb0:4] = unique[0xfe90:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfeb0:4], 0x0
r0 = unique[0xfe90:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11420:4] = r0 + 0x24
r0 = *[ram]unique[0x11420:4]

r1 = ram[0x80018b4:4]

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = ram[0x80018b0:4]

unique[0x11460:4] = r1 + 0x0
unique[0x17690:1] = SUBPIECE r0, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

goto ram[0x8001858:4]

unique[0xfe90:4] = 0x40000000
unique[0xfeb0:4] = unique[0xfe90:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfeb0:4], 0x0
r0 = unique[0xfe90:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11420:4] = r0 + 0x24
r0 = *[ram]unique[0x11420:4]

r1 = ram[0x80018b4:4]

unique[0x11420:4] = r1 + 0x0
r1 = *[ram]unique[0x11420:4]

tmpCY = r1 <= r0
tmpOV = sborrow(r0, r1)
r0 = r0 - r1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

r1 = ram[0x80018b0:4]

unique[0x11420:4] = r1 + 0x4
*[ram]unique[0x11420:4] = register[0x20:4]

r0 = r1

unique[0x11420:4] = r0 + 0x4
r0 = *[ram]unique[0x11420:4]

r1 = ram[0x80018b4:4]

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0xfed0:4] = 0x200
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

lr = 0x8001860 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80036a6:4]

CALLOTHER 0x1e

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

CALLOTHER 0x21

unique[0xfed0:4] = 0x400
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

lr = 0x8001870 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003690:4]

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x80018aa:4]

r0 = ram[0x80018b0:4]

unique[0x11460:4] = r0 + 0x8
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r0 = zext(unique[0x11eb0:1])

unique[0x11bd0:1] = r0 != 0x0
if (unique[0x11bd0:1]) goto ram[0x800188a:4]

unique[0xfe90:4] = 0x40000000
unique[0xfeb0:4] = unique[0xfe90:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfeb0:4], 0x0
r0 = unique[0xfe90:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11420:4] = r0 + 0x24
r0 = *[ram]unique[0x11420:4]

r1 = ram[0x80018b8:4]

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = ram[0x80018b0:4]

unique[0x11460:4] = r1 + 0x8
unique[0x17690:1] = SUBPIECE r0, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

goto ram[0x80018a2:4]

