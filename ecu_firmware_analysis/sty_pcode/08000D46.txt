mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x2c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x28:4]
sp = mult_addr

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d4e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000d1e:4]

r0 = 0x5
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d54 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80017a2:4]

r2 = 0x0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = 0x51
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d5e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000cf8:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

unique[0x114b0:4] = sp + 0x4
*[ram]unique[0x114b0:4] = register[0x20:4]

r2 = sp

r1 = 0x51
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d6e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000c12:4]

r6 = r0

unique[0x11bf0:1] = r6 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000da6:4]

lr = 0x8000d76 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000d3c:4]

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG


goto ram[0x8000d9e:4]

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d84 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80012b8:4]

unique[0xfed0:4] = 0x15e
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

lr = 0x8000d8c | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80017a2:4]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000d94 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80012b8:4]

unique[0xfed0:4] = 0x15e
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

lr = 0x8000d9c | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80017a2:4]

tmpCY = carry(r4, 0x1)
tmpOV = scarry(r4, 0x1)
r4 = r4 + 0x1
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

tmpCY = 0x2 <= r4
tmpOV = sborrow(r4, 0x2)
unique[0x11d20:4] = r4 - 0x2
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf820:1] = NG != OV
if (unique[0xf820:1]) goto ram[0x8000d7c:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

mult_addr = sp
r2 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r3 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8000df6:4]

unique[0x121b0:4] = r4 << 0x2
unique[0x121d0:4] = sp + unique[0x121b0:4]
unique[0x121f0:1] = *[ram]unique[0x121d0:4]
r0 = zext(unique[0x121f0:1])

unique[0xfe50:4] = 0x4
shift_carry = CY
r0 = r0 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000df2:4]

unique[0xfe50:4] = 0x25
shift_carry = CY
tmpCY = carry(r4, unique[0xfe50:4])
tmpOV = scarry(r4, unique[0xfe50:4])
r1 = r4 + unique[0xfe50:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x1a070:1] = SUBPIECE r1, 0x0
r0 = zext(unique[0x1a070:1])

lr = 0x8000dbe | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80009f0:4]

lr = 0x8000dc2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000d3c:4]

r5 = 0x0
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG


goto ram[0x8000dea:4]

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000dd0 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80012b8:4]

unique[0xfed0:4] = 0x15e
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

lr = 0x8000dd8 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80017a2:4]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000de0 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80012b8:4]

unique[0xfed0:4] = 0x15e
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

lr = 0x8000de8 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80017a2:4]

tmpCY = carry(r5, 0x1)
tmpOV = scarry(r5, 0x1)
r5 = r5 + 0x1
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

tmpCY = 0x4 <= r5
tmpOV = sborrow(r5, 0x4)
unique[0x11d20:4] = r5 - 0x4
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf820:1] = NG != OV
if (unique[0xf820:1]) goto ram[0x8000dc8:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8000da4:4]

tmpCY = carry(r4, 0x1)
tmpOV = scarry(r4, 0x1)
r0 = r4 + 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x1a070:1] = SUBPIECE r0, 0x0
r4 = zext(unique[0x1a070:1])

tmpCY = 0x1 <= r4
tmpOV = sborrow(r4, 0x1)
unique[0x11d20:4] = r4 - 0x1
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf820:1] = NG != OV
if (unique[0xf820:1]) goto ram[0x8000daa:4]

unique[0xfed0:4] = 0x3e8
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r2 = unique[0xfed0:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

r1 = 0x35
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e06 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000cf8:4]

r2 = 0x64
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = 0xed
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e10 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000cf8:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8000da4:4]

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r5 = r0

r4 = r1

tmpCY = 0x0 <= r4
tmpOV = sborrow(r4, 0x0)
unique[0x11d20:4] = r4 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf800:1] = NG == OV
if (unique[0xf800:1]) goto ram[0x8000e20:4]

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xfe50:4] = 0x1
shift_carry = CY
r0 = r5 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000e32:4]

tmpCY = r4 == 0x0
tmpOV = sborrow(0x0, r4)
r0 = 0x0 - r4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x1a1b0:2] = SUBPIECE r0, 0x0
r2 = zext(unique[0x1a1b0:2])

r1 = 0x90
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e32 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000cf8:4]

unique[0xfe50:4] = 0x2
shift_carry = CY
r0 = r5 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000e42:4]

unique[0x1a1b0:2] = SUBPIECE r4, 0x0
r2 = zext(unique[0x1a1b0:2])

r1 = 0x90
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e42 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000cf8:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

unique[0x4db0:4] = 0x2 * 0x4
sp = sp - unique[0x4db0:4]
mult_addr = sp
*[ram]mult_addr = register[0x340:8]
mult_addr = mult_addr + 0x8

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e50 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80019bc:4]

s16 = s0

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e5a | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80019bc:4]

s17 = s0

unique[0x4280:4] = 0x8000e5e + 0x4
unique[0x4290:4] = unique[0x4280:4] & 0xfffffffc
unique[0x42b0:4] = unique[0x4290:4] + 0xdc
s0 = *[ram]unique[0x42b0:4]

s0 = s16 f* s0

CALLOTHER 0x1, 0xa, 0xb, 0x6, cr0, cr13, cr0

r0 = s0

unique[0x18230:2] = SUBPIECE r0, 0x0
r4 = sext(unique[0x18230:2])

r1 = r4

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e78 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000e14:4]

mult_addr = sp
unique[0x4ef0:4] = 0x2 * 0x4
sp = sp + unique[0x4ef0:4]
d8 = *[ram]mult_addr
mult_addr = mult_addr + 0x8

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r5 = r0

r4 = r1

tmpCY = 0x0 <= r4
tmpOV = sborrow(r4, 0x0)
unique[0x11d20:4] = r4 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf800:1] = NG == OV
if (unique[0xf800:1]) goto ram[0x8000e8a:4]

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xfe50:4] = 0x1
shift_carry = CY
r0 = r5 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000e9c:4]

tmpCY = r4 == 0x0
tmpOV = sborrow(0x0, r4)
r0 = 0x0 - r4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x1a1b0:2] = SUBPIECE r0, 0x0
r2 = zext(unique[0x1a1b0:2])

r1 = 0x31
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000e9c | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000cf8:4]

unique[0xfe50:4] = 0x2
shift_carry = CY
r0 = r5 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8000eac:4]

unique[0x1a1b0:2] = SUBPIECE r4, 0x0
r2 = zext(unique[0x1a1b0:2])

r1 = 0x31
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8000eac | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000cf8:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r3 = ram[0x8000f28:4]

unique[0x11460:4] = r3 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r3 = zext(unique[0x11eb0:1])

tmpCY = 0x0 <= r3
tmpOV = sborrow(r3, 0x0)
unique[0x11d20:4] = r3 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf870:1] = NG != OV
unique[0xf890:1] = ZR || unique[0xf870:1]
if (unique[0xf890:1]) goto ram[0x8000ed2:4]

r3 = ram[0x8000f30:4]

unique[0x11460:4] = r3 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r3 = zext(unique[0x11eb0:1])

tmpCY = r1 <= r3
tmpOV = sborrow(r3, r1)
unique[0x11d80:4] = r3 - r1
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8000ed2:4]

r3 = ram[0x8000f2c:4]

unique[0x11420:4] = r3 + 0x0
r3 = *[ram]unique[0x11420:4]

unique[0x17720:4] = r0 << 0x2
unique[0x17740:4] = r3 + unique[0x17720:4]
*[ram]unique[0x17740:4] = register[0x28:4]

r3 = ram[0x8000f28:4]

unique[0x11460:4] = r3 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r3 = zext(unique[0x11eb0:1])

tmpCY = 0x1 <= r3
tmpOV = sborrow(r3, 0x1)
r3 = r3 - 0x1
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

r4 = ram[0x8000f28:4]

unique[0x11460:4] = r4 + 0x0
unique[0x17690:1] = SUBPIECE r3, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x3c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x2c:4]
sp = mult_addr

r6 = r0

r7 = r1

r4 = r2

r5 = r3

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

unique[0x112a0:4] = sp + 0x0
unique[0x17760:1] = SUBPIECE r4, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

unique[0x112a0:4] = sp + 0x1
unique[0x17760:1] = SUBPIECE r5, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r3 = sp

r2 = 0x2
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r7

r0 = r6

lr = 0x8000ef6 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000b9c:4]

mult_addr = sp
r3 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r7 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x3c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x2c:4]
sp = mult_addr

r5 = r0

r6 = r1

r4 = r2

unique[0x1a070:1] = SUBPIECE r4, 0x0
r0 = zext(unique[0x1a070:1])

unique[0x112a0:4] = sp + 0x0
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

unique[0x12850:4] = 0x8
unique[0x127a0:4] = unique[0x12850:4] - 0x1
unique[0x127b0:4] = r4 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12850:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12850:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
r0 = r4 >> 0x8
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x1
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

unique[0x12850:4] = 0x10
unique[0x127a0:4] = unique[0x12850:4] - 0x1
unique[0x127b0:4] = r4 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12850:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12850:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
r0 = r4 >> 0x10
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x2
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

unique[0x12850:4] = 0x18
unique[0x127a0:4] = unique[0x12850:4] - 0x1
unique[0x127b0:4] = r4 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12850:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12850:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
r0 = r4 >> 0x18
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x3
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r3 = sp

r2 = 0x4
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r6

r0 = r5

lr = 0x8000f24 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000b9c:4]

mult_addr = sp
r3 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r7 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r0 = r0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r4 = r6
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = r7
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r5 = r6
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

