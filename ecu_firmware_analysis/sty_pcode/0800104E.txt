mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r0 = ram[0x8001138:4]

tmpCY = carry(r0, 0xc)
tmpOV = scarry(r0, 0xc)
r0 = r0 + 0xc
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x3
shift_carry = CY
r0 = r0 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

tmpCY = 0x0 <= r0
tmpOV = sborrow(r0, 0x0)
unique[0x11d20:4] = r0 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8001132:4]

r2 = ram[0x8001140:4]

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x8001138:4]

lr = 0x8001068 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8002d1e:4]

r0 = ram[0x8001140:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

tmpCY = 0x10 <= r0
tmpOV = sborrow(r0, 0x10)
unique[0x11d20:4] = r0 - 0x10
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x800107a:4]

r0 = ram[0x8001140:4]

unique[0x11460:4] = r0 + 0xb
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r0 = zext(unique[0x11eb0:1])

r1 = ram[0x8001144:4]

unique[0x11460:4] = r1 + 0x0
unique[0x17690:1] = SUBPIECE r0, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

goto ram[0x8001132:4]

r0 = ram[0x8001140:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x310
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
tmpCY = unique[0xfed0:4] <= r0
tmpOV = sborrow(r0, unique[0xfed0:4])
unique[0x11d40:4] = r0 - unique[0xfed0:4]
tmpNG = unique[0x11d40:4] s< 0x0
tmpZR = unique[0x11d40:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x80010a4:4]

r0 = ram[0x8001140:4]

unique[0x11460:4] = r0 + 0xc
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r0 = zext(unique[0x11eb0:1])

r1 = ram[0x8001140:4]

unique[0x11460:4] = r1 + 0xb
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r1 = zext(unique[0x11eb0:1])

unique[0xff50:4] = 0x20 - 0x8
unique[0xff60:4] = r1 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r1 << 0x8
unique[0x116d0:4] = unique[0xffb0:4]
tmpCY = carry(r0, unique[0x116d0:4])
tmpOV = scarry(r0, unique[0x116d0:4])
r0 = r0 + unique[0x116d0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r1 = ram[0x8001148:4]

unique[0x11440:4] = r1 + 0x0
unique[0x176d0:2] = SUBPIECE r0, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

r0 = ram[0x8001140:4]

unique[0x11460:4] = r0 + 0xe
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r1 = zext(unique[0x11eb0:1])

unique[0x11460:4] = r0 + 0xd
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r0 = zext(unique[0x11eb0:1])

unique[0xff50:4] = 0x20 - 0x8
unique[0xff60:4] = r0 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r0 << 0x8
unique[0x116d0:4] = unique[0xffb0:4]
tmpCY = carry(r1, unique[0x116d0:4])
tmpOV = scarry(r1, unique[0x116d0:4])
r0 = r1 + unique[0x116d0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r1 = ram[0x8001148:4]

unique[0x11440:4] = r1 + 0x2
unique[0x176d0:2] = SUBPIECE r0, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

goto ram[0x8001132:4]

r0 = ram[0x8001140:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x300
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
tmpCY = unique[0xfed0:4] <= r0
tmpOV = sborrow(r0, unique[0xfed0:4])
unique[0x11d40:4] = r0 - unique[0xfed0:4]
tmpNG = unique[0x11d40:4] s< 0x0
tmpZR = unique[0x11d40:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x80010be:4]

lr = 0x80010b2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000b80:4]

lr = 0x80010b6 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000d3c:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = ram[0x800114c:4]

unique[0x11460:4] = r1 + 0x0
unique[0x17690:1] = SUBPIECE r0, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

goto ram[0x8001132:4]

r0 = ram[0x8001140:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x190
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
tmpCY = unique[0xfed0:4] <= r0
tmpOV = sborrow(r0, unique[0xfed0:4])
unique[0x11d40:4] = r0 - unique[0xfed0:4]
tmpNG = unique[0x11d40:4] s< 0x0
tmpZR = unique[0x11d40:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x80010d2:4]

r0 = ram[0x8001140:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x182
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
tmpCY = unique[0xfed0:4] <= r0
tmpOV = sborrow(r0, unique[0xfed0:4])
unique[0x11d40:4] = r0 - unique[0xfed0:4]
tmpNG = unique[0x11d40:4] s< 0x0
tmpZR = unique[0x11d40:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8001112:4]

r0 = ram[0x8001140:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x190
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
tmpCY = unique[0xfed0:4] <= r0
tmpOV = sborrow(r0, unique[0xfed0:4])
unique[0x11d40:4] = r0 - unique[0xfed0:4]
tmpNG = unique[0x11d40:4] s< 0x0
tmpZR = unique[0x11d40:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x80010e0:4]

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x80010e2:4]

r4 = 0x1
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x8001140:4]

unique[0x11460:4] = r0 + 0xc
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r1 = zext(unique[0x11eb0:1])

unique[0x11460:4] = r0 + 0xd
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r0 = zext(unique[0x11eb0:1])

unique[0xff50:4] = 0x20 - 0x8
unique[0xff60:4] = r0 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r0 << 0x8
unique[0x116d0:4] = unique[0xffb0:4]
tmpCY = carry(r1, unique[0x116d0:4])
tmpOV = scarry(r1, unique[0x116d0:4])
r5 = r1 + unique[0x116d0:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r0 = ram[0x8001140:4]

unique[0x11460:4] = r0 + 0xa
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r0 = zext(unique[0x11eb0:1])

tmpCY = 0x6 <= r0
tmpOV = sborrow(r0, 0x6)
unique[0x11d20:4] = r0 - 0x6
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf820:1] = NG != OV
if (unique[0xf820:1]) goto ram[0x8001104:4]

r0 = ram[0x8001140:4]

unique[0x11460:4] = r0 + 0xe
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r0 = zext(unique[0x11eb0:1])

unique[0x126c0:4] = 0x10 - 0x1
unique[0x126d0:4] = r0 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0x10 == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0x10 != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r1 = r0 << 0x10
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

r0 = ram[0x8001140:4]

unique[0x11460:4] = r0 + 0xf
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r0 = zext(unique[0x11eb0:1])

unique[0xff50:4] = 0x20 - 0x18
unique[0xff60:4] = r0 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r0 << 0x18
unique[0x116d0:4] = unique[0xffb0:4]
tmpCY = carry(r1, unique[0x116d0:4])
tmpOV = scarry(r1, unique[0x116d0:4])
r0 = r1 + unique[0x116d0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r5 = r5 + r0

r0 = ram[0x8001140:4]

unique[0x11460:4] = r0 + 0xb
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r1 = zext(unique[0x11eb0:1])

r2 = r5

r0 = r4

lr = 0x8001110 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000eae:4]

goto ram[0x8001132:4]

r0 = ram[0x8001140:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x400
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
tmpCY = unique[0xfed0:4] <= r0
tmpOV = sborrow(r0, unique[0xfed0:4])
unique[0x11d40:4] = r0 - unique[0xfed0:4]
tmpNG = unique[0x11d40:4] s< 0x0
tmpZR = unique[0x11d40:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8001122:4]

lr = 0x8001120 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000b78:4]

goto ram[0x8001132:4]

r0 = ram[0x8001140:4]

unique[0x11420:4] = r0 + 0x0
r0 = *[ram]unique[0x11420:4]

r1 = zext(0x401)
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

tmpCY = r1 <= r0
tmpOV = sborrow(r0, r1)
unique[0x11d80:4] = r0 - r1
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8001132:4]

lr = 0x8001132 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8000b80:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r0 = r0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = r2 & r0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x40
*[ram]unique[0x11420:4] = register[0x20:4]

r0 = r0 & r0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x126c0:4] = 0x2 - 0x1
unique[0x126d0:4] = r0 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0x2 == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0x2 != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r0 = r0 << 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x126c0:4] = 0x2 - 0x1
unique[0x126d0:4] = r2 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0x2 == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0x2 != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r4 = r2 << 0x2
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = r5
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = r0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = r0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x2c:4]
sp = mult_addr

r0 = 0x14
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x0
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x1
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

unique[0x112a0:4] = sp + 0x2
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x3
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = sp

lr = 0x800116e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80022d6:4]

mult_addr = sp
r3 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x2c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x28:4]
sp = mult_addr

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = r1

lr = 0x800117a | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8002024:4]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8001182 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8002024:4]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x4
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x800118a | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8002024:4]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = 0x8
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

lr = 0x8001192 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8002024:4]

unique[0xfed0:4] = 0x1c0
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x4
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x6
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x5
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x7
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r1 = sp

r0 = ram[0x8001304:4]

lr = 0x80011b8 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001ae8:4]

unique[0xfed0:4] = 0x7000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x4
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x6
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

unique[0x112a0:4] = sp + 0x5
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

unique[0x112a0:4] = sp + 0x7
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r1 = sp

r0 = ram[0x8001308:4]

lr = 0x80011da | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001ae8:4]

unique[0xfed0:4] = 0x1000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x7
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r1 = sp

r0 = ram[0x8001308:4]

lr = 0x80011ee | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001ae8:4]

r0 = 0x38
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

r0 = 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x4
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x5
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x6
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

unique[0x112a0:4] = sp + 0x7
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r1 = sp

r0 = ram[0x8001308:4]

lr = 0x8001210 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001ae8:4]

r2 = 0x5
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = 0x3
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x8001308:4]

lr = 0x800121a | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001bfe:4]

r2 = 0x5
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = 0x4
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x8001308:4]

lr = 0x8001224 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001bfe:4]

r2 = 0x5
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r2

r0 = ram[0x8001308:4]

lr = 0x800122e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001bfe:4]

r0 = 0x80
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x4
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x5
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x6
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x7
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r1 = sp

r0 = ram[0x8001308:4]

lr = 0x8001252 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001ae8:4]

r0 = 0x78
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x4
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

unique[0x112a0:4] = sp + 0x5
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x7
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r1 = sp

r0 = ram[0x800130c:4]

lr = 0x800126e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001ae8:4]

unique[0xfed0:4] = 0x600
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x20:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x4
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x3
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x5
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0x7
unique[0x17760:1] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17760:1]

r1 = sp

r0 = ram[0x8001310:4]

lr = 0x800128e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001ae8:4]

mult_addr = sp
r2 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r3 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

tmpCY = 0x1 <= r0
tmpOV = sborrow(r0, 0x1)
unique[0x11d20:4] = r0 - 0x1
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x80012a6:4]

r1 = ram[0x8001308:4]

tmpCY = carry(r1, 0x14)
tmpOV = scarry(r1, 0x14)
r1 = r1 + 0x14
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
r1 = *[ram]unique[0x11420:4]

