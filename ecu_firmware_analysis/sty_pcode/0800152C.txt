mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
sp = mult_addr

unique[0xfdd0:4] = 0x14
sp = sp - unique[0xfdd0:4]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x126c0:4] = 0xc - 0x1
unique[0x126d0:4] = r1 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0xc == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0xc != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r0 = r1 << 0xc
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

lr = 0x8001538 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x80020d8:4]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0xc
unique[0x17850:2] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]

unique[0x112a0:4] = sp + 0x0
unique[0x17850:2] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]

unique[0xfed0:4] = 0x104
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x112a0:4] = sp + 0x2
unique[0x17850:2] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]

unique[0xfed0:4] = 0x800
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r0 = unique[0xfed0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x112a0:4] = sp + 0x4
unique[0x17850:2] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]

unique[0x117b0:4] = 0x2 - 0x1
unique[0x117c0:4] = r0 s>> unique[0x117b0:4]
unique[0x117e0:4] = unique[0x117c0:4] & 0x1
unique[0x117f0:1] = 0x2 == 0x0
unique[0x11800:1] = unique[0x117f0:1] && CY
unique[0x11810:1] = 0x2 != 0x0
unique[0x11820:1] = unique[0x117e0:4] != 0x0
unique[0x11830:1] = unique[0x11810:1] && unique[0x11820:1]
tmpCY = unique[0x11800:1] || unique[0x11830:1]
r0 = r0 s>> 0x2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0xa
unique[0x17850:2] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x112a0:4] = sp + 0xe
unique[0x17850:2] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]

unique[0x112a0:4] = sp + 0x6
unique[0x17850:2] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]

unique[0x112a0:4] = sp + 0x8
unique[0x17850:2] = SUBPIECE r0, 0x0
*[ram]unique[0x112a0:4] = unique[0x17850:2]

r1 = sp

r0 = ram[0x80016e4:4]

lr = 0x800156e | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003750:4]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x80016e4:4]

lr = 0x8001576 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003944:4]

unique[0xfdd0:4] = 0x14
sp = sp + unique[0xfdd0:4]

mult_addr = sp
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r1 = r0

r2 = 0x0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8001588:4]

tmpCY = carry(r2, 0x1)
tmpOV = scarry(r2, 0x1)
r0 = r2 + 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x1a070:1] = SUBPIECE r0, 0x0
r2 = zext(unique[0x1a070:1])

tmpCY = 0x1 <= r1
tmpOV = sborrow(r1, 0x1)
r0 = r1 - 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

r1 = r1 & r0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

tmpCY = 0x0 <= r1
tmpOV = sborrow(r1, 0x0)
unique[0x11d20:4] = r1 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8001580:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11a40:4] = ~r2
r0 = r0 & unique[0x11a40:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r6 = r0

r4 = r6

r0 = zext(0xffff)
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0xff50:4] = 0x20 - 0x3
unique[0xff60:4] = r4 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r4 << 0x3
r4 = r0 & unique[0xffb0:4]
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0

r0 = r4

lr = 0x80015a6 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800157a:4]

r0 = r0 + r4

unique[0x1a1b0:2] = SUBPIECE r0, 0x0
r4 = zext(unique[0x1a1b0:2])

r1 = 0x80
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x80016e8:4]

lr = 0x80015b2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001be4:4]

unique[0xfe50:4] = 0x80
shift_carry = CY
r4 = r4 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0

r0 = ram[0x80016e4:4]

lr = 0x80015bc | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003a40:4]


r1 = 0x2
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x80016e4:4]

lr = 0x80015c6 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003ad8:4]

tmpCY = 0x0 <= r0
tmpOV = sborrow(r0, 0x0)
unique[0x11d20:4] = r0 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x80015be:4]

r1 = r4

r0 = ram[0x80016e4:4]

lr = 0x80015d2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003a46:4]


r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x80016e4:4]

lr = 0x80015dc | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003ad8:4]

tmpCY = 0x0 <= r0
tmpOV = sborrow(r0, 0x0)
unique[0x11d20:4] = r0 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x80015d4:4]

r0 = ram[0x80016e4:4]

lr = 0x80015e6 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003a40:4]


r1 = 0x2
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x80016e4:4]

lr = 0x80015f0 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8003ad8:4]

tmpCY = 0x0 <= r0
tmpOV = sborrow(r0, 0x0)
unique[0x11d20:4] = r0 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x80015e8:4]

r1 = 0x1
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x80016e4:4]

