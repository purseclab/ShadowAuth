r1 = r0

r2 = 0x0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

goto ram[0x8001588:4]

tmpCY = carry(r2, 0x1)
tmpOV = scarry(r2, 0x1)
r0 = r2 + 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x1a070:1] = SUBPIECE r0, 0x0
r2 = zext(unique[0x1a070:1])

tmpCY = 0x1 <= r1
tmpOV = sborrow(r1, 0x1)
r0 = r1 - 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

r1 = r1 & r0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

tmpCY = 0x0 <= r1
tmpOV = sborrow(r1, 0x0)
unique[0x11d20:4] = r1 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8001580:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11a40:4] = ~r2
r0 = r0 & unique[0x11a40:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r6 = r0

r4 = r6

r0 = zext(0xffff)
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0xff50:4] = 0x20 - 0x3
unique[0xff60:4] = r4 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r4 << 0x3
r4 = r0 & unique[0xffb0:4]
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0

r0 = r4

lr = 0x80015a6 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x800157a:4]

r0 = r0 + r4

unique[0x1a1b0:2] = SUBPIECE r0, 0x0
r4 = zext(unique[0x1a1b0:2])

r1 = 0x80
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = ram[0x80016e8:4]

lr = 0x80015b2 | 0x1
ISAModeSwitch = 0x1
TB = ISAModeSwitch
call ram[0x8001be4:4]

