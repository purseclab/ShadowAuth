r2 = r1

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x4
r1 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x1f
shift_carry = CY
unique[0x11a60:4] = ~unique[0xfe50:4]
r1 = r1 & unique[0x11a60:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

r1 = r1 | r2
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x4
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r0 == 0x0
if (unique[0x11bf0:1]) goto ram[0x800249c:4]

r1 = ram[0x80027b8:4]

unique[0x11420:4] = r1 + 0x0
r1 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x800000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r1 = r1 | unique[0xfed0:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

r2 = ram[0x80027c0:4]

unique[0x112a0:4] = r2 + 0x304
*[ram]unique[0x112a0:4] = register[0x24:4]

goto ram[0x80024aa:4]

r1 = ram[0x80027b8:4]

unique[0x11420:4] = r1 + 0x0
r1 = *[ram]unique[0x11420:4]

