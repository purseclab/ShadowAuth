mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r2 = 0x0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = 0x0
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x20
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r5 = zext(unique[0x11ef0:2])

r6 = zext(0xefff)
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0

r5 = r5 & r6
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x20
unique[0x176d0:2] = SUBPIECE r5, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x20
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r3 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r0 + 0x4
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r4 = zext(unique[0x11ef0:2])

unique[0x11440:4] = r0 + 0x1c
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r2 = zext(unique[0x11ef0:2])

r5 = zext(0x8fff)
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r2 = r2 & r5
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r5 = zext(0xfcff)
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r2 = r2 & r5
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r1 + 0x0
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r5 = zext(unique[0x11ef0:2])

r6 = zext(0xffff)
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0

unique[0xff50:4] = 0x20 - 0x8
unique[0xff60:4] = r5 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r5 << 0x8
r5 = r6 & unique[0xffb0:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r2 = r2 | r5
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r5 = zext(0xdfff)
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r3 = r3 & r5
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r1 + 0xc
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r5 = zext(unique[0x11ef0:2])

unique[0xff50:4] = 0x20 - 0xc
unique[0xff60:4] = r5 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r5 << 0xc
r5 = r6 & unique[0xffb0:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r3 = r3 | r5
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r1 + 0x2
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r5 = zext(unique[0x11ef0:2])

unique[0xff50:4] = 0x20 - 0xc
unique[0xff60:4] = r5 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r5 << 0xc
r5 = r6 & unique[0xffb0:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r3 = r3 | r5
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

r5 = ram[0x8004468:4]

tmpCY = r5 <= r0
tmpOV = sborrow(r0, r5)
unique[0x11d80:4] = r0 - r5
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x800407a:4]

r5 = ram[0x800446c:4]

tmpCY = r5 <= r0
tmpOV = sborrow(r0, r5)
unique[0x11d80:4] = r0 - r5
tmpNG = unique[0x11d80:4] s< 0x0
tmpZR = unique[0x11d80:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x800408c:4]

r5 = zext(0xbfff)
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r4 = r4 & r5
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r1 + 0x10
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r5 = zext(unique[0x11ef0:2])

r6 = zext(0xffff)
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0

unique[0xff50:4] = 0x20 - 0x6
unique[0xff60:4] = r5 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r5 << 0x6
r5 = r6 & unique[0xffb0:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r4 = r4 | r5
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x4
unique[0x176d0:2] = SUBPIECE r4, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x1c
unique[0x176d0:2] = SUBPIECE r2, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11420:4] = r1 + 0x8
r5 = *[ram]unique[0x11420:4]

unique[0x11420:4] = r0 + 0x40
*[ram]unique[0x11420:4] = register[0x34:4]

unique[0x11440:4] = r0 + 0x20
unique[0x176d0:2] = SUBPIECE r3, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x0
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x2
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x4
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11420:4] = r0 + 0x8
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x11440:4] = r0 + 0xc
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0xe
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x10
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11440:4] = r0 + 0x12
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r3 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

r0 = r3

tmpCY = carry(r0, 0x18)
tmpOV = scarry(r0, 0x18)
r0 = r0 + 0x18
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

r5 = 0x1
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x12780:4] = r1 & 0xff
unique[0x126c0:4] = unique[0x12780:4] - 0x1
unique[0x126d0:4] = r5 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = unique[0x12780:4] == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = unique[0x12780:4] != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r5 = r5 << unique[0x12780:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x1a1b0:2] = SUBPIECE r5, 0x0
r4 = zext(unique[0x1a1b0:2])

unique[0x11440:4] = r3 + 0x20
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r5 = zext(unique[0x11ef0:2])

unique[0x11a40:4] = ~r4
r5 = r5 & unique[0x11a40:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r3 + 0x20
unique[0x176d0:2] = SUBPIECE r5, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x80040ca:4]

tmpCY = 0x8 <= r1
tmpOV = sborrow(r1, 0x8)
unique[0x11d20:4] = r1 - 0x8
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x80040e0:4]

unique[0x100c0:4] = 0x1 - 0x1
unique[0x100d0:4] = r1 >> unique[0x100c0:4]
unique[0x100f0:4] = unique[0x100d0:4] & 0x1
shift_carry = SUBPIECE unique[0x100f0:4], 0x0
unique[0x10120:4] = r1 s>> 0x1
unique[0x116d0:4] = unique[0x10120:4]
tmpCY = carry(r0, unique[0x116d0:4])
tmpOV = scarry(r0, unique[0x116d0:4])
r0 = r0 + unique[0x116d0:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x11420:4] = r0 + 0x0
r5 = *[ram]unique[0x11420:4]

r6 = zext(0xff8f)
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0

r5 = r5 & r6
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x34:4]

unique[0x11420:4] = r0 + 0x0
r5 = *[ram]unique[0x11420:4]

r5 = r5 | r2
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x34:4]

goto ram[0x8004100:4]

tmpCY = 0x4 <= r1
tmpOV = sborrow(r1, 0x4)
r5 = r1 - 0x4
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xff10:4] = 0x1
unique[0xff30:4] = 0xe
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r5 = r5 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r5 = r5 >> unique[0x19d40:4]

r0 = r0 + r5

unique[0x11420:4] = r0 + 0x0
r5 = *[ram]unique[0x11420:4]

r6 = zext(0x8fff)
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0

r5 = r5 & r6
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x34:4]

unique[0x11420:4] = r0 + 0x0
r5 = *[ram]unique[0x11420:4]

r6 = zext(0xffff)
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0

unique[0xff50:4] = 0x20 - 0x8
unique[0xff60:4] = r2 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r2 << 0x8
r6 = r6 & unique[0xffb0:4]
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0

r5 = r5 | r6
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x34:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

unique[0x11420:4] = r0 + 0x34
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11420:4] = r0 + 0x38
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11420:4] = r0 + 0x3c
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11420:4] = r0 + 0x40
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r2 = r1

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x18
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r3 = zext(0xff8f)
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

r1 = r1 & r3
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r1 | r2
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x18
unique[0x176d0:2] = SUBPIECE r1, 0x0
*[ram]unique[0x11440:4] = unique[0x176d0:2]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r2 = r1

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11440:4] = r0 + 0x18
unique[0x11ef0:2] = *[ram]unique[0x11440:4]
r1 = zext(unique[0x11ef0:2])

r3 = zext(0x8fff)
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

