mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = 0x0
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = 0xf
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11460:4] = r0 + 0x3
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r4 = zext(unique[0x11eb0:1])

unique[0x11bf0:1] = r4 == 0x0
if (unique[0x11bf0:1]) goto ram[0x800232a:4]

r4 = ram[0x800239c:4]

unique[0x11420:4] = r4 + 0x0
r4 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x700
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r4 = r4 & unique[0xfed0:4]
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0

unique[0xfed0:4] = 0x700
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
tmpCY = r4 <= unique[0xfed0:4]
tmpOV = sborrow(unique[0xfed0:4], r4)
r4 = unique[0xfed0:4] - r4
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0

unique[0xff10:4] = 0x8
unique[0xff30:4] = 0x7
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r1 = r4 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r1 = r1 >> unique[0x19d40:4]

unique[0xfe50:4] = 0x4
shift_carry = CY
tmpCY = r1 <= unique[0xfe50:4]
tmpOV = sborrow(unique[0xfe50:4], r1)
r4 = unique[0xfe50:4] - r1
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0

unique[0x1a070:1] = SUBPIECE r4, 0x0
r3 = zext(unique[0x1a070:1])

unique[0x11880:4] = r1 & 0xff
unique[0x117b0:4] = unique[0x11880:4] - 0x1
unique[0x117c0:4] = r2 s>> unique[0x117b0:4]
unique[0x117e0:4] = unique[0x117c0:4] & 0x1
unique[0x117f0:1] = unique[0x11880:4] == 0x0
unique[0x11800:1] = unique[0x117f0:1] && CY
unique[0x11810:1] = unique[0x11880:4] != 0x0
unique[0x11820:1] = unique[0x117e0:4] != 0x0
unique[0x11830:1] = unique[0x11810:1] && unique[0x11820:1]
tmpCY = unique[0x11800:1] || unique[0x11830:1]
r2 = r2 s>> unique[0x11880:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x11460:4] = r0 + 0x1
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r4 = zext(unique[0x11eb0:1])

unique[0x12780:4] = r3 & 0xff
unique[0x126c0:4] = unique[0x12780:4] - 0x1
unique[0x126d0:4] = r4 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = unique[0x12780:4] == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = unique[0x12780:4] != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r4 = r4 << unique[0x12780:4]
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x1a070:1] = SUBPIECE r4, 0x0
r1 = zext(unique[0x1a070:1])

unique[0x11460:4] = r0 + 0x2
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r4 = zext(unique[0x11eb0:1])

r4 = r4 & r2
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r1 | r4
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x126c0:4] = 0x1c - 0x1
unique[0x126d0:4] = r1 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0x1c == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0x1c != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r4 = r1 << 0x1c
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x12850:4] = 0x18
unique[0x127a0:4] = unique[0x12850:4] - 0x1
unique[0x127b0:4] = r4 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12850:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12850:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
r1 = r4 >> 0x18
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

r4 = ram[0x80023a0:4]

unique[0x11460:4] = r0 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r5 = zext(unique[0x11eb0:1])

unique[0x11480:4] = r4 + r5
unique[0x176b0:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11480:4] = unique[0x176b0:1]

unique[0x11460:4] = r0 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r4 = zext(unique[0x11eb0:1])

unique[0xfe50:4] = 0x1f
shift_carry = CY
r5 = r4 & unique[0xfe50:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r4 = 0x1
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x12780:4] = r5 & 0xff
unique[0x126c0:4] = unique[0x12780:4] - 0x1
unique[0x126d0:4] = r4 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = unique[0x12780:4] == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = unique[0x12780:4] != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r4 = r4 << unique[0x12780:4]
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x11460:4] = r0 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r5 = zext(unique[0x11eb0:1])

unique[0x117b0:4] = 0x5 - 0x1
unique[0x117c0:4] = r5 s>> unique[0x117b0:4]
unique[0x117e0:4] = unique[0x117c0:4] & 0x1
unique[0x117f0:1] = 0x5 == 0x0
unique[0x11800:1] = unique[0x117f0:1] && CY
unique[0x11810:1] = 0x5 != 0x0
unique[0x11820:1] = unique[0x117e0:4] != 0x0
unique[0x11830:1] = unique[0x11810:1] && unique[0x11820:1]
tmpCY = unique[0x11800:1] || unique[0x11830:1]
r5 = r5 s>> 0x5
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x126c0:4] = 0x2 - 0x1
unique[0x126d0:4] = r5 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0x2 == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0x2 != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r5 = r5 << 0x2
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0xfe70:4] = 0xe000e000
shift_carry = CY
tmpCY = carry(r5, unique[0xfe70:4])
tmpOV = scarry(r5, unique[0xfe70:4])
r5 = r5 + unique[0xfe70:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

unique[0x112a0:4] = r5 + 0x100
*[ram]unique[0x112a0:4] = register[0x30:4]

goto ram[0x800233e:4]

unique[0x11460:4] = r0 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r4 = zext(unique[0x11eb0:1])

unique[0xfe50:4] = 0x1f
shift_carry = CY
r5 = r4 & unique[0xfe50:4]
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0

r4 = 0x1
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x12780:4] = r5 & 0xff
unique[0x126c0:4] = unique[0x12780:4] - 0x1
unique[0x126d0:4] = r4 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = unique[0x12780:4] == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = unique[0x12780:4] != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r4 = r4 << unique[0x12780:4]
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

r5 = ram[0x80023a4:4]

unique[0x11460:4] = r0 + 0x0
unique[0x11eb0:1] = *[ram]unique[0x11460:4]
r6 = zext(unique[0x11eb0:1])

unique[0x117b0:4] = 0x5 - 0x1
unique[0x117c0:4] = r6 s>> unique[0x117b0:4]
unique[0x117e0:4] = unique[0x117c0:4] & 0x1
unique[0x117f0:1] = 0x5 == 0x0
unique[0x11800:1] = unique[0x117f0:1] && CY
unique[0x11810:1] = 0x5 != 0x0
unique[0x11820:1] = unique[0x117e0:4] != 0x0
unique[0x11830:1] = unique[0x11810:1] && unique[0x11820:1]
tmpCY = unique[0x11800:1] || unique[0x11830:1]
r6 = r6 s>> 0x5
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x17720:4] = r6 << 0x2
unique[0x17740:4] = r5 + unique[0x17720:4]
*[ram]unique[0x17740:4] = register[0x30:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r2 = ram[0x80023a8:4]

r2 = r2 & r1
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = r2 | r0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x800239c:4]

tmpCY = 0x4 <= r3
tmpOV = sborrow(r3, 0x4)
r3 = r3 - 0x4
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8002360:4]

r2 = ram[0x800239c:4]

tmpCY = carry(r2, 0x4)
tmpOV = scarry(r2, 0x4)
r2 = r2 + 0x4
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

r2 = r2 | r0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x800239c:4]

tmpCY = carry(r3, 0x4)
tmpOV = scarry(r3, 0x4)
r3 = r3 + 0x4
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

goto ram[0x800236e:4]

r2 = ram[0x800239c:4]

tmpCY = carry(r2, 0x4)
tmpOV = scarry(r2, 0x4)
r2 = r2 + 0x4
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11a40:4] = ~r0
r2 = r2 & unique[0x11a40:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x800239c:4]

tmpCY = carry(r3, 0x4)
tmpOV = scarry(r3, 0x4)
r3 = r3 + 0x4
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

tmpCY = 0x4 <= r0
tmpOV = sborrow(r0, 0x4)
unique[0x11d20:4] = r0 - 0x4
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8002386:4]

unique[0xfe70:4] = 0xe000e000
shift_carry = CY
r1 = unique[0xfe70:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x11420:4] = r1 + 0x10
r1 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x4
shift_carry = CY
r1 = r1 | unique[0xfe50:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0xfe70:4] = 0xe000e000
shift_carry = CY
r2 = unique[0xfe70:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11420:4] = r2 + 0x10
*[ram]unique[0x11420:4] = register[0x24:4]

goto ram[0x8002396:4]

unique[0xfe70:4] = 0xe000e000
shift_carry = CY
r1 = unique[0xfe70:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x11420:4] = r1 + 0x10
r1 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x4
shift_carry = CY
unique[0x11a60:4] = ~unique[0xfe50:4]
r1 = r1 & unique[0x11a60:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0xfe70:4] = 0xe000e000
shift_carry = CY
r2 = unique[0xfe70:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x11420:4] = r2 + 0x10
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r0 = r0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x126c0:4] = 0x17 - 0x1
unique[0x126d0:4] = r7 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0x17 == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0x17 != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r2 = r7 << 0x17
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x114f0:4] = r12 + 0x0
CALLOTHER 0xc, 0x0, cr14, unique[0x114f0:4]

goto ram[0x8001ba4:4]

goto ram[0x80023a6:4]

goto ram[0x80026a8:4]

goto ram[0x80023aa:4]

