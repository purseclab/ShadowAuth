r1 = zext(0xffff)
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x24:4]

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11460:4] = r0 + 0x4
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

unique[0x11460:4] = r0 + 0x5
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

unique[0x11460:4] = r0 + 0x6
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

unique[0x11460:4] = r0 + 0x7
unique[0x17690:1] = SUBPIECE r1, 0x0
*[ram]unique[0x11460:4] = unique[0x17690:1]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x2c:4]
sp = mult_addr

unique[0xfed0:4] = 0x10000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r2 = unique[0xfed0:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x28:4]

unique[0x114b0:4] = sp + 0x0
r2 = *[ram]unique[0x114b0:4]

r2 = r2 | r1
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x114b0:4] = sp + 0x0
*[ram]unique[0x114b0:4] = register[0x28:4]

unique[0x114b0:4] = sp + 0x0
r2 = *[ram]unique[0x114b0:4]

unique[0x11420:4] = r0 + 0x1c
*[ram]unique[0x11420:4] = register[0x28:4]

unique[0x11420:4] = r0 + 0x1c
*[ram]unique[0x11420:4] = register[0x24:4]

unique[0x114b0:4] = sp + 0x0
r2 = *[ram]unique[0x114b0:4]

