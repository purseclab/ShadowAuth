r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r1 + 0x18
r2 = *[ram]unique[0x11420:4]

unique[0xff10:4] = 0x10
unique[0xff30:4] = 0x7
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r0 = r2 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r0 = r0 >> unique[0x19d40:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r2 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8002f5e:4]

unique[0x11420:4] = r0 + 0x14
r3 = *[ram]unique[0x11420:4]

r3 = r3 | r1
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x14
*[ram]unique[0x11420:4] = register[0x2c:4]

goto ram[0x8002f64:4]

unique[0x11420:4] = r0 + 0x14
r3 = *[ram]unique[0x11420:4]

unique[0x11a40:4] = ~r1
r3 = r3 & unique[0x11a40:4]
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

