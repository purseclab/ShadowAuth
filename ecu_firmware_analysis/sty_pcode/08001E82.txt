mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x3c:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x38:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x34:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = 0x0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r4 = 0x0
tmpNG = r4 s< 0x0
tmpZR = r4 == 0x0
ZR = tmpZR
NG = tmpNG

r5 = 0x2
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
ZR = tmpZR
NG = tmpNG

r6 = 0x0
tmpNG = r6 s< 0x0
tmpZR = r6 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = 0x2
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

r7 = ram[0x8002058:4]

tmpCY = carry(r7, 0x8)
tmpOV = scarry(r7, 0x8)
r7 = r7 + 0x8
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r7 + 0x0
r7 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0xc
shift_carry = CY
r1 = r7 & unique[0xfe50:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8001ea6:4]

tmpCY = 0x4 <= r1
tmpOV = sborrow(r1, 0x4)
unique[0x11d20:4] = r1 - 0x4
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8001eac:4]

tmpCY = 0x8 <= r1
tmpOV = sborrow(r1, 0x8)
unique[0x11d20:4] = r1 - 0x8
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8001f14:4]

goto ram[0x8001eb2:4]

r7 = ram[0x8002070:4]

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x3c:4]

goto ram[0x8001f1a:4]

r7 = ram[0x8002074:4]

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x3c:4]

goto ram[0x8001f1a:4]

r7 = ram[0x8002058:4]

tmpCY = carry(r7, 0x4)
tmpOV = scarry(r7, 0x4)
r7 = r7 + 0x4
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r7 + 0x0
r7 = *[ram]unique[0x11420:4]

unique[0xff10:4] = 0x16
unique[0xff30:4] = 0x0
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r6 = r7 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r6 = r6 >> unique[0x19d40:4]

r7 = ram[0x8002058:4]

tmpCY = carry(r7, 0x4)
tmpOV = scarry(r7, 0x4)
r7 = r7 + 0x4
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r7 + 0x0
r7 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x3f
shift_carry = CY
r3 = r7 & unique[0xfe50:4]
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

unique[0x11bf0:1] = r6 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8001ee4:4]

r7 = ram[0x8002074:4]

unique[0x19d80:8] = zext(r7)
unique[0x19d90:8] = zext(r3)
unique[0x19db0:8] = unique[0x19d80:8] / unique[0x19d90:8]
r7 = SUBPIECE unique[0x19db0:8], 0x0

r12 = ram[0x8002058:4]

unique[0xfe50:4] = 0x4
shift_carry = CY
tmpCY = carry(r12, unique[0xfe50:4])
tmpOV = scarry(r12, unique[0xfe50:4])
r12 = r12 + unique[0xfe50:4]
tmpNG = r12 s< 0x0
tmpZR = r12 == 0x0

unique[0x112a0:4] = r12 + 0x0
r12 = *[ram]unique[0x112a0:4]

unique[0xff10:4] = 0x6
unique[0xff30:4] = 0x8
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r12 = r12 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r12 = r12 >> unique[0x19d40:4]

r4 = r7 * r12

goto ram[0x8001efe:4]

r7 = ram[0x8002070:4]

unique[0x19d80:8] = zext(r7)
unique[0x19d90:8] = zext(r3)
unique[0x19db0:8] = unique[0x19d80:8] / unique[0x19d90:8]
r7 = SUBPIECE unique[0x19db0:8], 0x0

r12 = ram[0x8002058:4]

unique[0xfe50:4] = 0x4
shift_carry = CY
tmpCY = carry(r12, unique[0xfe50:4])
tmpOV = scarry(r12, unique[0xfe50:4])
r12 = r12 + unique[0xfe50:4]
tmpNG = r12 s< 0x0
tmpZR = r12 == 0x0

unique[0x112a0:4] = r12 + 0x0
r12 = *[ram]unique[0x112a0:4]

unique[0xff10:4] = 0x6
unique[0xff30:4] = 0x8
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r12 = r12 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r12 = r12 >> unique[0x19d40:4]

r4 = r7 * r12

r7 = ram[0x8002058:4]

tmpCY = carry(r7, 0x4)
tmpOV = scarry(r7, 0x4)
r7 = r7 + 0x4
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r7 + 0x0
r7 = *[ram]unique[0x11420:4]

unique[0xff10:4] = 0x10
unique[0xff30:4] = 0x1
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r7 = r7 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r7 = r7 >> unique[0x19d40:4]

tmpCY = carry(r7, 0x1)
tmpOV = scarry(r7, 0x1)
r7 = r7 + 0x1
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x126c0:4] = 0x1 - 0x1
unique[0x126d0:4] = r7 << unique[0x126c0:4]
unique[0x126f0:4] = unique[0x126d0:4] & 0x80000000
unique[0x12700:1] = 0x1 == 0x0
unique[0x12710:1] = unique[0x12700:1] && CY
unique[0x12720:1] = 0x1 != 0x0
unique[0x12730:1] = unique[0x126f0:4] != 0x0
unique[0x12740:1] = unique[0x12720:1] && unique[0x12730:1]
tmpCY = unique[0x12710:1] || unique[0x12740:1]
r5 = r7 << 0x1
tmpNG = r5 s< 0x0
tmpZR = r5 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x19d80:8] = zext(r4)
unique[0x19d90:8] = zext(r5)
unique[0x19db0:8] = unique[0x19d80:8] / unique[0x19d90:8]
r7 = SUBPIECE unique[0x19db0:8], 0x0

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x3c:4]

goto ram[0x8001f1a:4]

r7 = ram[0x8002070:4]

unique[0x11420:4] = r0 + 0x0
*[ram]unique[0x11420:4] = register[0x3c:4]



r7 = ram[0x8002058:4]

tmpCY = carry(r7, 0x8)
tmpOV = scarry(r7, 0x8)
r7 = r7 + 0x8
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r7 + 0x0
r7 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0xf0
shift_carry = CY
r1 = r7 & unique[0xfe50:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x12850:4] = 0x4
unique[0x127a0:4] = unique[0x12850:4] - 0x1
unique[0x127b0:4] = r1 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12850:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12850:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
r1 = r1 >> 0x4
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

r7 = ram[0x8002078:4]

unique[0x11480:4] = r7 + r1
unique[0x11ed0:1] = *[ram]unique[0x11480:4]
r2 = zext(unique[0x11ed0:1])

unique[0x11420:4] = r0 + 0x0
r7 = *[ram]unique[0x11420:4]

unique[0x12880:4] = r2 & 0xff
unique[0x127a0:4] = unique[0x12880:4] - 0x1
unique[0x127b0:4] = r7 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12880:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12880:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
unique[0x12890:4] = r2 & 0xff
r7 = r7 >> unique[0x12890:4]
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x4
*[ram]unique[0x11420:4] = register[0x3c:4]

r7 = ram[0x8002058:4]

tmpCY = carry(r7, 0x8)
tmpOV = scarry(r7, 0x8)
r7 = r7 + 0x8
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r7 + 0x0
r7 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x1c00
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r1 = r7 & unique[0xfed0:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x12850:4] = 0xa
unique[0x127a0:4] = unique[0x12850:4] - 0x1
unique[0x127b0:4] = r1 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12850:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12850:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
r1 = r1 >> 0xa
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

r7 = ram[0x8002078:4]

unique[0x11480:4] = r7 + r1
unique[0x11ed0:1] = *[ram]unique[0x11480:4]
r2 = zext(unique[0x11ed0:1])

unique[0x11420:4] = r0 + 0x4
r7 = *[ram]unique[0x11420:4]

unique[0x12880:4] = r2 & 0xff
unique[0x127a0:4] = unique[0x12880:4] - 0x1
unique[0x127b0:4] = r7 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12880:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12880:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
unique[0x12890:4] = r2 & 0xff
r7 = r7 >> unique[0x12890:4]
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x8
*[ram]unique[0x11420:4] = register[0x3c:4]

r7 = ram[0x8002058:4]

tmpCY = carry(r7, 0x8)
tmpOV = scarry(r7, 0x8)
r7 = r7 + 0x8
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r7 + 0x0
r7 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0xe000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r1 = r7 & unique[0xfed0:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

unique[0x12850:4] = 0xd
unique[0x127a0:4] = unique[0x12850:4] - 0x1
unique[0x127b0:4] = r1 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12850:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12850:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
r1 = r1 >> 0xd
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

r7 = ram[0x8002078:4]

unique[0x11480:4] = r7 + r1
unique[0x11ed0:1] = *[ram]unique[0x11480:4]
r2 = zext(unique[0x11ed0:1])

unique[0x11420:4] = r0 + 0x4
r7 = *[ram]unique[0x11420:4]

unique[0x12880:4] = r2 & 0xff
unique[0x127a0:4] = unique[0x12880:4] - 0x1
unique[0x127b0:4] = r7 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12880:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12880:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
unique[0x12890:4] = r2 & 0xff
r7 = r7 >> unique[0x12890:4]
tmpNG = r7 s< 0x0
tmpZR = r7 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0xc
*[ram]unique[0x11420:4] = register[0x3c:4]

mult_addr = sp
r4 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r5 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r6 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
r7 = *[ram]mult_addr
mult_addr = mult_addr + 0x4
pc = *[ram]mult_addr
mult_addr = mult_addr + 0x4
sp = mult_addr
unique[0x0:4] = pc & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = pc & 0xfffffffe
return pc

r1 = 0x0
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xfed0:4] = 0x300
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r2 = r0 & unique[0xfed0:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

unique[0xfed0:4] = 0x300
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
tmpCY = unique[0xfed0:4] <= r2
tmpOV = sborrow(r2, unique[0xfed0:4])
unique[0x11d40:4] = r2 - unique[0xfed0:4]
tmpNG = unique[0x11d40:4] s< 0x0
tmpZR = unique[0x11d40:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8001f82:4]

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x8)
tmpOV = scarry(r2, 0x8)
r2 = r2 + 0x8
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r1 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x1f0000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
unique[0x11a60:4] = ~unique[0xfed0:4]
r1 = r1 & unique[0x11a60:4]
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0

r2 = ram[0x800207c:4]

r2 = r2 & r0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r1 = r1 | r2
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x8)
tmpOV = scarry(r2, 0x8)
r2 = r2 + 0x8
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
*[ram]unique[0x11420:4] = register[0x24:4]

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x70)
tmpOV = scarry(r2, 0x70)
r2 = r2 + 0x70
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0xff10:4] = 0x0
unique[0xff30:4] = 0xb
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r3 = r0 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r3 = r3 >> unique[0x19d40:4]

r2 = r2 | r3
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x8002058:4]

tmpCY = carry(r3, 0x70)
tmpOV = scarry(r3, 0x70)
r3 = r3 + 0x70
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = ram[0x800206c:4]

tmpCY = 0x44 <= r1
tmpOV = sborrow(r1, 0x44)
r1 = r1 - 0x44
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = ram[0x800206c:4]

tmpCY = 0x40 <= r1
tmpOV = sborrow(r1, 0x40)
r1 = r1 - 0x40
tmpNG = r1 s< 0x0
tmpZR = r1 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = ram[0x8002080:4]

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x8c)
tmpOV = scarry(r2, 0x8c)
r2 = r2 + 0x8c
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x300000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
unique[0x11a60:4] = ~unique[0xfed0:4]
r0 = r0 & unique[0x11a60:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r0 = r0 | r1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r2 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x8c)
tmpOV = scarry(r2, 0x8c)
r2 = r2 + 0x8c
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0xc00000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
unique[0x11a60:4] = ~unique[0xfed0:4]
r0 = r0 & unique[0x11a60:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r0 = r0 | r1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r2 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x8c)
tmpOV = scarry(r2, 0x8c)
r2 = r2 + 0x8c
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x1f
shift_carry = CY
unique[0x11a60:4] = ~unique[0xfe50:4]
r0 = r0 & unique[0x11a60:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

tmpCY = 0x1 <= r1
tmpOV = sborrow(r1, 0x1)
r2 = r1 - 0x1
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

r0 = r0 | r2
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x8c)
tmpOV = scarry(r2, 0x8c)
r2 = r2 + 0x8c
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x8c)
tmpOV = scarry(r2, 0x8c)
r2 = r2 + 0x8c
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x1f00
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
unique[0x11a60:4] = ~unique[0xfed0:4]
r0 = r0 & unique[0x11a60:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

tmpCY = 0x1 <= r1
tmpOV = sborrow(r1, 0x1)
r2 = r1 - 0x1
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xff50:4] = 0x20 - 0x8
unique[0xff60:4] = r2 >> unique[0xff50:4]
unique[0xff80:4] = unique[0xff60:4] & 0x1
shift_carry = SUBPIECE unique[0xff80:4], 0x0
unique[0xffb0:4] = r2 << 0x8
r0 = r0 | unique[0xffb0:4]
tmpCY = shift_carry
tmpOV = OV
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x8c)
tmpOV = scarry(r2, 0x8c)
r2 = r2 + 0x8c
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x8c)
tmpOV = scarry(r2, 0x8c)
r2 = r2 + 0x8c
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r0 = *[ram]unique[0x11420:4]

unique[0xfed0:4] = 0x30000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
unique[0x11a60:4] = ~unique[0xfed0:4]
r0 = r0 & unique[0x11a60:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

r0 = r0 | r1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r2 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = ram[0x8002084:4]

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x20:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8002036:4]

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x30)
tmpOV = scarry(r2, 0x30)
r2 = r2 + 0x30
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

r2 = r2 | r0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x8002058:4]

tmpCY = carry(r3, 0x30)
tmpOV = scarry(r3, 0x30)
r3 = r3 + 0x30
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

goto ram[0x8002044:4]

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x30)
tmpOV = scarry(r2, 0x30)
r2 = r2 + 0x30
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

unique[0x11a40:4] = ~r0
r2 = r2 & unique[0x11a40:4]
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x8002058:4]

tmpCY = carry(r3, 0x30)
tmpOV = scarry(r3, 0x30)
r3 = r3 + 0x30
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r1 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8002088:4]

r2 = ram[0x8002058:4]

tmpCY = carry(r2, 0x34)
tmpOV = scarry(r2, 0x34)
r2 = r2 + 0x34
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r2 + 0x0
r2 = *[ram]unique[0x11420:4]

r2 = r2 | r0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

r3 = ram[0x8002058:4]

tmpCY = carry(r3, 0x34)
tmpOV = scarry(r3, 0x34)
r3 = r3 + 0x34
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r3 + 0x0
*[ram]unique[0x11420:4] = register[0x28:4]

goto ram[0x8002092:4]

tmpCY = 0x0 <= r0
tmpOV = sborrow(r0, 0x0)
r0 = r0 - 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

r2 = r2 & r0
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
ZR = tmpZR
NG = tmpNG

