r1 = r0

r2 = zext(0xffff)
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r1 + 0x0
r3 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x2
shift_carry = CY
unique[0x11a60:4] = ~unique[0xfe50:4]
r3 = r3 & unique[0x11a60:4]
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

unique[0x11420:4] = r1 + 0x0
*[ram]unique[0x11420:4] = register[0x2c:4]

goto ram[0x8002f16:4]

tmpCY = 0x1 <= r2
tmpOV = sborrow(r2, 0x1)
r2 = r2 - 0x1
tmpNG = r2 s< 0x0
tmpZR = r2 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0x11420:4] = r1 + 0x4
r3 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x2
shift_carry = CY
r3 = r3 & unique[0xfe50:4]
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

tmpCY = 0x2 <= r3
tmpOV = sborrow(r3, 0x2)
unique[0x11d20:4] = r3 - 0x2
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8002f24:4]

tmpCY = 0x0 <= r2
tmpOV = sborrow(r2, 0x0)
unique[0x11d20:4] = r2 - 0x0
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6c0:1] = ZR == 0x0
if (unique[0xf6c0:1]) goto ram[0x8002f14:4]

unique[0x11420:4] = r1 + 0x4
r3 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x2
shift_carry = CY
r3 = r3 & unique[0xfe50:4]
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

tmpCY = 0x2 <= r3
tmpOV = sborrow(r3, 0x2)
unique[0x11d20:4] = r3 - 0x2
tmpNG = unique[0x11d20:4] s< 0x0
tmpZR = unique[0x11d20:4] == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG
OV = tmpOV

unique[0xf6a0:1] = ZR != 0x0
if (unique[0xf6a0:1]) goto ram[0x8002f30:4]

r0 = 0x1
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r1 + 0x18
r2 = *[ram]unique[0x11420:4]

unique[0xfe50:4] = 0x70
shift_carry = CY
r0 = r2 & unique[0xfe50:4]
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r1 + 0x18
r2 = *[ram]unique[0x11420:4]

unique[0x12850:4] = 0x18
unique[0x127a0:4] = unique[0x12850:4] - 0x1
unique[0x127b0:4] = r2 >> unique[0x127a0:4]
unique[0x127d0:4] = unique[0x127b0:4] & 0x1
unique[0x127e0:1] = unique[0x12850:4] == 0x0
unique[0x127f0:1] = unique[0x127e0:1] && CY
unique[0x12800:1] = unique[0x12850:4] != 0x0
unique[0x12810:1] = unique[0x127d0:4] != 0x0
unique[0x12820:1] = unique[0x12800:1] && unique[0x12810:1]
tmpCY = unique[0x127f0:1] || unique[0x12820:1]
r0 = r2 >> 0x18
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
CY = tmpCY
ZR = tmpZR
NG = tmpNG

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

r1 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r1 + 0x18
r2 = *[ram]unique[0x11420:4]

unique[0xff10:4] = 0x10
unique[0xff30:4] = 0x7
unique[0x19d20:4] = unique[0xff10:4] + unique[0xff30:4]
unique[0x19d40:4] = 0x1f - unique[0x19d20:4]
r0 = r2 << unique[0x19d40:4]
unique[0x19d40:4] = 0x1f - unique[0xff30:4]
r0 = r0 >> unique[0x19d40:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

unique[0x11bf0:1] = r2 == 0x0
if (unique[0x11bf0:1]) goto ram[0x8002f5e:4]

unique[0x11420:4] = r0 + 0x14
r3 = *[ram]unique[0x11420:4]

r3 = r3 | r1
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x14
*[ram]unique[0x11420:4] = register[0x2c:4]

goto ram[0x8002f64:4]

unique[0x11420:4] = r0 + 0x14
r3 = *[ram]unique[0x11420:4]

unique[0x11a40:4] = ~r1
r3 = r3 & unique[0x11a40:4]
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0x11420:4] = r0 + 0x14
*[ram]unique[0x11420:4] = register[0x2c:4]

unique[0x0:4] = lr & 0x1
ISAModeSwitch = unique[0x0:4] != 0x0
TB = ISAModeSwitch
pc = lr & 0xfffffffe
return pc

mult_addr = sp
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x58:4]
mult_addr = mult_addr - 0x4
*[ram]mult_addr = register[0x30:4]
sp = mult_addr

r2 = r0

r0 = 0x0
tmpNG = r0 s< 0x0
tmpZR = r0 == 0x0
ZR = tmpZR
NG = tmpNG

unique[0xfed0:4] = 0xf00000
unique[0xfef0:4] = unique[0xfed0:4] >> 0x1f
shift_carry = SUBPIECE unique[0xfef0:4], 0x0
r3 = r1 & unique[0xfed0:4]
tmpNG = r3 s< 0x0
tmpZR = r3 == 0x0

